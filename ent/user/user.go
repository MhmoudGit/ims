// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeLeaderOfProject holds the string denoting the leader_of_project edge name in mutations.
	EdgeLeaderOfProject = "leader_of_project"
	// EdgeCoordinatorOfProject holds the string denoting the coordinator_of_project edge name in mutations.
	EdgeCoordinatorOfProject = "coordinator_of_project"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "project_members"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// LeaderOfProjectTable is the table that holds the leader_of_project relation/edge. The primary key declared below.
	LeaderOfProjectTable = "user_leader_of_project"
	// LeaderOfProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	LeaderOfProjectInverseTable = "projects"
	// CoordinatorOfProjectTable is the table that holds the coordinator_of_project relation/edge. The primary key declared below.
	CoordinatorOfProjectTable = "user_coordinator_of_project"
	// CoordinatorOfProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	CoordinatorOfProjectInverseTable = "projects"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPassword,
	FieldEmail,
	FieldPhone,
	FieldCreatedAt,
	FieldOrganization,
	FieldTitle,
	FieldIsActive,
	FieldType,
}

var (
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"project_id", "user_id"}
	// LeaderOfProjectPrimaryKey and LeaderOfProjectColumn2 are the table columns denoting the
	// primary key for the leader_of_project relation (M2M).
	LeaderOfProjectPrimaryKey = []string{"user_id", "project_id"}
	// CoordinatorOfProjectPrimaryKey and CoordinatorOfProjectColumn2 are the table columns denoting the
	// primary key for the coordinator_of_project relation (M2M).
	CoordinatorOfProjectPrimaryKey = []string{"user_id", "project_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCoordinator Type = "coordinator"
	TypeMember      Type = "member"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCoordinator, TypeMember:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOrganization orders the results by the organization field.
func ByOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganization, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProjectsCount orders the results by projects count.
func ByProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectsStep(), opts...)
	}
}

// ByProjects orders the results by projects terms.
func ByProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLeaderOfProjectCount orders the results by leader_of_project count.
func ByLeaderOfProjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeaderOfProjectStep(), opts...)
	}
}

// ByLeaderOfProject orders the results by leader_of_project terms.
func ByLeaderOfProject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaderOfProjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCoordinatorOfProjectCount orders the results by coordinator_of_project count.
func ByCoordinatorOfProjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoordinatorOfProjectStep(), opts...)
	}
}

// ByCoordinatorOfProject orders the results by coordinator_of_project terms.
func ByCoordinatorOfProject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoordinatorOfProjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProjectsTable, ProjectsPrimaryKey...),
	)
}
func newLeaderOfProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaderOfProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LeaderOfProjectTable, LeaderOfProjectPrimaryKey...),
	)
}
func newCoordinatorOfProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoordinatorOfProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CoordinatorOfProjectTable, CoordinatorOfProjectPrimaryKey...),
	)
}
