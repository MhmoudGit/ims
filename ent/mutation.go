// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tarqeem/ims/ent/discipline"
	"github.com/tarqeem/ims/ent/predicate"
	"github.com/tarqeem/ims/ent/project"
	"github.com/tarqeem/ims/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDiscipline = "Discipline"
	TypeProject    = "Project"
	TypeUser       = "User"
)

// DisciplineMutation represents an operation that mutates the Discipline nodes in the graph.
type DisciplineMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Discipline, error)
	predicates    []predicate.Discipline
}

var _ ent.Mutation = (*DisciplineMutation)(nil)

// disciplineOption allows management of the mutation configuration using functional options.
type disciplineOption func(*DisciplineMutation)

// newDisciplineMutation creates new mutation for the Discipline entity.
func newDisciplineMutation(c config, op Op, opts ...disciplineOption) *DisciplineMutation {
	m := &DisciplineMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscipline,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDisciplineID sets the ID field of the mutation.
func withDisciplineID(id int) disciplineOption {
	return func(m *DisciplineMutation) {
		var (
			err   error
			once  sync.Once
			value *Discipline
		)
		m.oldValue = func(ctx context.Context) (*Discipline, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Discipline.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscipline sets the old Discipline of the mutation.
func withDiscipline(node *Discipline) disciplineOption {
	return func(m *DisciplineMutation) {
		m.oldValue = func(context.Context) (*Discipline, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DisciplineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DisciplineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DisciplineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DisciplineMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Discipline.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DisciplineMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DisciplineMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Discipline entity.
// If the Discipline object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DisciplineMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DisciplineMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the DisciplineMutation builder.
func (m *DisciplineMutation) Where(ps ...predicate.Discipline) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DisciplineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DisciplineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Discipline, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DisciplineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DisciplineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Discipline).
func (m *DisciplineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DisciplineMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, discipline.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DisciplineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discipline.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DisciplineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discipline.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Discipline field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DisciplineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discipline.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Discipline field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DisciplineMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DisciplineMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DisciplineMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Discipline numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DisciplineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DisciplineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DisciplineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Discipline nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DisciplineMutation) ResetField(name string) error {
	switch name {
	case discipline.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Discipline field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DisciplineMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DisciplineMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DisciplineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DisciplineMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DisciplineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DisciplineMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DisciplineMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Discipline unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DisciplineMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Discipline edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	owner                  *string
	location               *string
	_type                  *project.Type
	project_nature         *project.ProjectNature
	delivery_strategies    *string
	state                  *string
	contracting_strategies *string
	dollar_value           *int
	adddollar_value        *int
	execution_location     *string
	clearedFields          map[string]struct{}
	leader                 map[int]struct{}
	removedleader          map[int]struct{}
	clearedleader          bool
	coordinator            map[int]struct{}
	removedcoordinator     map[int]struct{}
	clearedcoordinator     bool
	members                map[int]struct{}
	removedmembers         map[int]struct{}
	clearedmembers         bool
	done                   bool
	oldValue               func(context.Context) (*Project, error)
	predicates             []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetOwner sets the "owner" field.
func (m *ProjectMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *ProjectMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *ProjectMutation) ResetOwner() {
	m.owner = nil
}

// SetLocation sets the "location" field.
func (m *ProjectMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *ProjectMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *ProjectMutation) ResetLocation() {
	m.location = nil
}

// SetType sets the "type" field.
func (m *ProjectMutation) SetType(pr project.Type) {
	m._type = &pr
}

// GetType returns the value of the "type" field in the mutation.
func (m *ProjectMutation) GetType() (r project.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldType(ctx context.Context) (v project.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ProjectMutation) ResetType() {
	m._type = nil
}

// SetProjectNature sets the "project_nature" field.
func (m *ProjectMutation) SetProjectNature(pn project.ProjectNature) {
	m.project_nature = &pn
}

// ProjectNature returns the value of the "project_nature" field in the mutation.
func (m *ProjectMutation) ProjectNature() (r project.ProjectNature, exists bool) {
	v := m.project_nature
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectNature returns the old "project_nature" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldProjectNature(ctx context.Context) (v project.ProjectNature, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectNature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectNature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectNature: %w", err)
	}
	return oldValue.ProjectNature, nil
}

// ResetProjectNature resets all changes to the "project_nature" field.
func (m *ProjectMutation) ResetProjectNature() {
	m.project_nature = nil
}

// SetDeliveryStrategies sets the "delivery_strategies" field.
func (m *ProjectMutation) SetDeliveryStrategies(s string) {
	m.delivery_strategies = &s
}

// DeliveryStrategies returns the value of the "delivery_strategies" field in the mutation.
func (m *ProjectMutation) DeliveryStrategies() (r string, exists bool) {
	v := m.delivery_strategies
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveryStrategies returns the old "delivery_strategies" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDeliveryStrategies(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeliveryStrategies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeliveryStrategies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveryStrategies: %w", err)
	}
	return oldValue.DeliveryStrategies, nil
}

// ResetDeliveryStrategies resets all changes to the "delivery_strategies" field.
func (m *ProjectMutation) ResetDeliveryStrategies() {
	m.delivery_strategies = nil
}

// SetState sets the "state" field.
func (m *ProjectMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *ProjectMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *ProjectMutation) ResetState() {
	m.state = nil
}

// SetContractingStrategies sets the "contracting_strategies" field.
func (m *ProjectMutation) SetContractingStrategies(s string) {
	m.contracting_strategies = &s
}

// ContractingStrategies returns the value of the "contracting_strategies" field in the mutation.
func (m *ProjectMutation) ContractingStrategies() (r string, exists bool) {
	v := m.contracting_strategies
	if v == nil {
		return
	}
	return *v, true
}

// OldContractingStrategies returns the old "contracting_strategies" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldContractingStrategies(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractingStrategies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractingStrategies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractingStrategies: %w", err)
	}
	return oldValue.ContractingStrategies, nil
}

// ResetContractingStrategies resets all changes to the "contracting_strategies" field.
func (m *ProjectMutation) ResetContractingStrategies() {
	m.contracting_strategies = nil
}

// SetDollarValue sets the "dollar_value" field.
func (m *ProjectMutation) SetDollarValue(i int) {
	m.dollar_value = &i
	m.adddollar_value = nil
}

// DollarValue returns the value of the "dollar_value" field in the mutation.
func (m *ProjectMutation) DollarValue() (r int, exists bool) {
	v := m.dollar_value
	if v == nil {
		return
	}
	return *v, true
}

// OldDollarValue returns the old "dollar_value" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDollarValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDollarValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDollarValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDollarValue: %w", err)
	}
	return oldValue.DollarValue, nil
}

// AddDollarValue adds i to the "dollar_value" field.
func (m *ProjectMutation) AddDollarValue(i int) {
	if m.adddollar_value != nil {
		*m.adddollar_value += i
	} else {
		m.adddollar_value = &i
	}
}

// AddedDollarValue returns the value that was added to the "dollar_value" field in this mutation.
func (m *ProjectMutation) AddedDollarValue() (r int, exists bool) {
	v := m.adddollar_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetDollarValue resets all changes to the "dollar_value" field.
func (m *ProjectMutation) ResetDollarValue() {
	m.dollar_value = nil
	m.adddollar_value = nil
}

// SetExecutionLocation sets the "execution_location" field.
func (m *ProjectMutation) SetExecutionLocation(s string) {
	m.execution_location = &s
}

// ExecutionLocation returns the value of the "execution_location" field in the mutation.
func (m *ProjectMutation) ExecutionLocation() (r string, exists bool) {
	v := m.execution_location
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutionLocation returns the old "execution_location" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldExecutionLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutionLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutionLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutionLocation: %w", err)
	}
	return oldValue.ExecutionLocation, nil
}

// ResetExecutionLocation resets all changes to the "execution_location" field.
func (m *ProjectMutation) ResetExecutionLocation() {
	m.execution_location = nil
}

// AddLeaderIDs adds the "leader" edge to the User entity by ids.
func (m *ProjectMutation) AddLeaderIDs(ids ...int) {
	if m.leader == nil {
		m.leader = make(map[int]struct{})
	}
	for i := range ids {
		m.leader[ids[i]] = struct{}{}
	}
}

// ClearLeader clears the "leader" edge to the User entity.
func (m *ProjectMutation) ClearLeader() {
	m.clearedleader = true
}

// LeaderCleared reports if the "leader" edge to the User entity was cleared.
func (m *ProjectMutation) LeaderCleared() bool {
	return m.clearedleader
}

// RemoveLeaderIDs removes the "leader" edge to the User entity by IDs.
func (m *ProjectMutation) RemoveLeaderIDs(ids ...int) {
	if m.removedleader == nil {
		m.removedleader = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.leader, ids[i])
		m.removedleader[ids[i]] = struct{}{}
	}
}

// RemovedLeader returns the removed IDs of the "leader" edge to the User entity.
func (m *ProjectMutation) RemovedLeaderIDs() (ids []int) {
	for id := range m.removedleader {
		ids = append(ids, id)
	}
	return
}

// LeaderIDs returns the "leader" edge IDs in the mutation.
func (m *ProjectMutation) LeaderIDs() (ids []int) {
	for id := range m.leader {
		ids = append(ids, id)
	}
	return
}

// ResetLeader resets all changes to the "leader" edge.
func (m *ProjectMutation) ResetLeader() {
	m.leader = nil
	m.clearedleader = false
	m.removedleader = nil
}

// AddCoordinatorIDs adds the "coordinator" edge to the User entity by ids.
func (m *ProjectMutation) AddCoordinatorIDs(ids ...int) {
	if m.coordinator == nil {
		m.coordinator = make(map[int]struct{})
	}
	for i := range ids {
		m.coordinator[ids[i]] = struct{}{}
	}
}

// ClearCoordinator clears the "coordinator" edge to the User entity.
func (m *ProjectMutation) ClearCoordinator() {
	m.clearedcoordinator = true
}

// CoordinatorCleared reports if the "coordinator" edge to the User entity was cleared.
func (m *ProjectMutation) CoordinatorCleared() bool {
	return m.clearedcoordinator
}

// RemoveCoordinatorIDs removes the "coordinator" edge to the User entity by IDs.
func (m *ProjectMutation) RemoveCoordinatorIDs(ids ...int) {
	if m.removedcoordinator == nil {
		m.removedcoordinator = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.coordinator, ids[i])
		m.removedcoordinator[ids[i]] = struct{}{}
	}
}

// RemovedCoordinator returns the removed IDs of the "coordinator" edge to the User entity.
func (m *ProjectMutation) RemovedCoordinatorIDs() (ids []int) {
	for id := range m.removedcoordinator {
		ids = append(ids, id)
	}
	return
}

// CoordinatorIDs returns the "coordinator" edge IDs in the mutation.
func (m *ProjectMutation) CoordinatorIDs() (ids []int) {
	for id := range m.coordinator {
		ids = append(ids, id)
	}
	return
}

// ResetCoordinator resets all changes to the "coordinator" edge.
func (m *ProjectMutation) ResetCoordinator() {
	m.coordinator = nil
	m.clearedcoordinator = false
	m.removedcoordinator = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *ProjectMutation) AddMemberIDs(ids ...int) {
	if m.members == nil {
		m.members = make(map[int]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *ProjectMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the User entity was cleared.
func (m *ProjectMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *ProjectMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *ProjectMutation) RemovedMembersIDs() (ids []int) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *ProjectMutation) MembersIDs() (ids []int) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *ProjectMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.owner != nil {
		fields = append(fields, project.FieldOwner)
	}
	if m.location != nil {
		fields = append(fields, project.FieldLocation)
	}
	if m._type != nil {
		fields = append(fields, project.FieldType)
	}
	if m.project_nature != nil {
		fields = append(fields, project.FieldProjectNature)
	}
	if m.delivery_strategies != nil {
		fields = append(fields, project.FieldDeliveryStrategies)
	}
	if m.state != nil {
		fields = append(fields, project.FieldState)
	}
	if m.contracting_strategies != nil {
		fields = append(fields, project.FieldContractingStrategies)
	}
	if m.dollar_value != nil {
		fields = append(fields, project.FieldDollarValue)
	}
	if m.execution_location != nil {
		fields = append(fields, project.FieldExecutionLocation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldName:
		return m.Name()
	case project.FieldOwner:
		return m.Owner()
	case project.FieldLocation:
		return m.Location()
	case project.FieldType:
		return m.GetType()
	case project.FieldProjectNature:
		return m.ProjectNature()
	case project.FieldDeliveryStrategies:
		return m.DeliveryStrategies()
	case project.FieldState:
		return m.State()
	case project.FieldContractingStrategies:
		return m.ContractingStrategies()
	case project.FieldDollarValue:
		return m.DollarValue()
	case project.FieldExecutionLocation:
		return m.ExecutionLocation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldOwner:
		return m.OldOwner(ctx)
	case project.FieldLocation:
		return m.OldLocation(ctx)
	case project.FieldType:
		return m.OldType(ctx)
	case project.FieldProjectNature:
		return m.OldProjectNature(ctx)
	case project.FieldDeliveryStrategies:
		return m.OldDeliveryStrategies(ctx)
	case project.FieldState:
		return m.OldState(ctx)
	case project.FieldContractingStrategies:
		return m.OldContractingStrategies(ctx)
	case project.FieldDollarValue:
		return m.OldDollarValue(ctx)
	case project.FieldExecutionLocation:
		return m.OldExecutionLocation(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case project.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case project.FieldType:
		v, ok := value.(project.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case project.FieldProjectNature:
		v, ok := value.(project.ProjectNature)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectNature(v)
		return nil
	case project.FieldDeliveryStrategies:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveryStrategies(v)
		return nil
	case project.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case project.FieldContractingStrategies:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractingStrategies(v)
		return nil
	case project.FieldDollarValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDollarValue(v)
		return nil
	case project.FieldExecutionLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutionLocation(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	var fields []string
	if m.adddollar_value != nil {
		fields = append(fields, project.FieldDollarValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case project.FieldDollarValue:
		return m.AddedDollarValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case project.FieldDollarValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDollarValue(v)
		return nil
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldOwner:
		m.ResetOwner()
		return nil
	case project.FieldLocation:
		m.ResetLocation()
		return nil
	case project.FieldType:
		m.ResetType()
		return nil
	case project.FieldProjectNature:
		m.ResetProjectNature()
		return nil
	case project.FieldDeliveryStrategies:
		m.ResetDeliveryStrategies()
		return nil
	case project.FieldState:
		m.ResetState()
		return nil
	case project.FieldContractingStrategies:
		m.ResetContractingStrategies()
		return nil
	case project.FieldDollarValue:
		m.ResetDollarValue()
		return nil
	case project.FieldExecutionLocation:
		m.ResetExecutionLocation()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.leader != nil {
		edges = append(edges, project.EdgeLeader)
	}
	if m.coordinator != nil {
		edges = append(edges, project.EdgeCoordinator)
	}
	if m.members != nil {
		edges = append(edges, project.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeLeader:
		ids := make([]ent.Value, 0, len(m.leader))
		for id := range m.leader {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeCoordinator:
		ids := make([]ent.Value, 0, len(m.coordinator))
		for id := range m.coordinator {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedleader != nil {
		edges = append(edges, project.EdgeLeader)
	}
	if m.removedcoordinator != nil {
		edges = append(edges, project.EdgeCoordinator)
	}
	if m.removedmembers != nil {
		edges = append(edges, project.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeLeader:
		ids := make([]ent.Value, 0, len(m.removedleader))
		for id := range m.removedleader {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeCoordinator:
		ids := make([]ent.Value, 0, len(m.removedcoordinator))
		for id := range m.removedcoordinator {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedleader {
		edges = append(edges, project.EdgeLeader)
	}
	if m.clearedcoordinator {
		edges = append(edges, project.EdgeCoordinator)
	}
	if m.clearedmembers {
		edges = append(edges, project.EdgeMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeLeader:
		return m.clearedleader
	case project.EdgeCoordinator:
		return m.clearedcoordinator
	case project.EdgeMembers:
		return m.clearedmembers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeLeader:
		m.ResetLeader()
		return nil
	case project.EdgeCoordinator:
		m.ResetCoordinator()
		return nil
	case project.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	name                          *string
	password                      *string
	email                         *string
	phone                         *string
	created_at                    *time.Time
	organization                  *string
	title                         *string
	is_active                     *bool
	_type                         *user.Type
	clearedFields                 map[string]struct{}
	projects                      map[int]struct{}
	removedprojects               map[int]struct{}
	clearedprojects               bool
	leader_of_project             map[int]struct{}
	removedleader_of_project      map[int]struct{}
	clearedleader_of_project      bool
	coordinator_of_project        map[int]struct{}
	removedcoordinator_of_project map[int]struct{}
	clearedcoordinator_of_project bool
	done                          bool
	oldValue                      func(context.Context) (*User, error)
	predicates                    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetOrganization sets the "organization" field.
func (m *UserMutation) SetOrganization(s string) {
	m.organization = &s
}

// Organization returns the value of the "organization" field in the mutation.
func (m *UserMutation) Organization() (r string, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganization returns the old "organization" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOrganization(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganization is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganization requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganization: %w", err)
	}
	return oldValue.Organization, nil
}

// ClearOrganization clears the value of the "organization" field.
func (m *UserMutation) ClearOrganization() {
	m.organization = nil
	m.clearedFields[user.FieldOrganization] = struct{}{}
}

// OrganizationCleared returns if the "organization" field was cleared in this mutation.
func (m *UserMutation) OrganizationCleared() bool {
	_, ok := m.clearedFields[user.FieldOrganization]
	return ok
}

// ResetOrganization resets all changes to the "organization" field.
func (m *UserMutation) ResetOrganization() {
	m.organization = nil
	delete(m.clearedFields, user.FieldOrganization)
}

// SetTitle sets the "title" field.
func (m *UserMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *UserMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *UserMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[user.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *UserMutation) TitleCleared() bool {
	_, ok := m.clearedFields[user.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *UserMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, user.FieldTitle)
}

// SetIsActive sets the "is_active" field.
func (m *UserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *UserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *UserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *UserMutation) AddProjectIDs(ids ...int) {
	if m.projects == nil {
		m.projects = make(map[int]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *UserMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *UserMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *UserMutation) RemoveProjectIDs(ids ...int) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *UserMutation) RemovedProjectsIDs() (ids []int) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *UserMutation) ProjectsIDs() (ids []int) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *UserMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// AddLeaderOfProjectIDs adds the "leader_of_project" edge to the Project entity by ids.
func (m *UserMutation) AddLeaderOfProjectIDs(ids ...int) {
	if m.leader_of_project == nil {
		m.leader_of_project = make(map[int]struct{})
	}
	for i := range ids {
		m.leader_of_project[ids[i]] = struct{}{}
	}
}

// ClearLeaderOfProject clears the "leader_of_project" edge to the Project entity.
func (m *UserMutation) ClearLeaderOfProject() {
	m.clearedleader_of_project = true
}

// LeaderOfProjectCleared reports if the "leader_of_project" edge to the Project entity was cleared.
func (m *UserMutation) LeaderOfProjectCleared() bool {
	return m.clearedleader_of_project
}

// RemoveLeaderOfProjectIDs removes the "leader_of_project" edge to the Project entity by IDs.
func (m *UserMutation) RemoveLeaderOfProjectIDs(ids ...int) {
	if m.removedleader_of_project == nil {
		m.removedleader_of_project = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.leader_of_project, ids[i])
		m.removedleader_of_project[ids[i]] = struct{}{}
	}
}

// RemovedLeaderOfProject returns the removed IDs of the "leader_of_project" edge to the Project entity.
func (m *UserMutation) RemovedLeaderOfProjectIDs() (ids []int) {
	for id := range m.removedleader_of_project {
		ids = append(ids, id)
	}
	return
}

// LeaderOfProjectIDs returns the "leader_of_project" edge IDs in the mutation.
func (m *UserMutation) LeaderOfProjectIDs() (ids []int) {
	for id := range m.leader_of_project {
		ids = append(ids, id)
	}
	return
}

// ResetLeaderOfProject resets all changes to the "leader_of_project" edge.
func (m *UserMutation) ResetLeaderOfProject() {
	m.leader_of_project = nil
	m.clearedleader_of_project = false
	m.removedleader_of_project = nil
}

// AddCoordinatorOfProjectIDs adds the "coordinator_of_project" edge to the Project entity by ids.
func (m *UserMutation) AddCoordinatorOfProjectIDs(ids ...int) {
	if m.coordinator_of_project == nil {
		m.coordinator_of_project = make(map[int]struct{})
	}
	for i := range ids {
		m.coordinator_of_project[ids[i]] = struct{}{}
	}
}

// ClearCoordinatorOfProject clears the "coordinator_of_project" edge to the Project entity.
func (m *UserMutation) ClearCoordinatorOfProject() {
	m.clearedcoordinator_of_project = true
}

// CoordinatorOfProjectCleared reports if the "coordinator_of_project" edge to the Project entity was cleared.
func (m *UserMutation) CoordinatorOfProjectCleared() bool {
	return m.clearedcoordinator_of_project
}

// RemoveCoordinatorOfProjectIDs removes the "coordinator_of_project" edge to the Project entity by IDs.
func (m *UserMutation) RemoveCoordinatorOfProjectIDs(ids ...int) {
	if m.removedcoordinator_of_project == nil {
		m.removedcoordinator_of_project = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.coordinator_of_project, ids[i])
		m.removedcoordinator_of_project[ids[i]] = struct{}{}
	}
}

// RemovedCoordinatorOfProject returns the removed IDs of the "coordinator_of_project" edge to the Project entity.
func (m *UserMutation) RemovedCoordinatorOfProjectIDs() (ids []int) {
	for id := range m.removedcoordinator_of_project {
		ids = append(ids, id)
	}
	return
}

// CoordinatorOfProjectIDs returns the "coordinator_of_project" edge IDs in the mutation.
func (m *UserMutation) CoordinatorOfProjectIDs() (ids []int) {
	for id := range m.coordinator_of_project {
		ids = append(ids, id)
	}
	return
}

// ResetCoordinatorOfProject resets all changes to the "coordinator_of_project" edge.
func (m *UserMutation) ResetCoordinatorOfProject() {
	m.coordinator_of_project = nil
	m.clearedcoordinator_of_project = false
	m.removedcoordinator_of_project = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.organization != nil {
		fields = append(fields, user.FieldOrganization)
	}
	if m.title != nil {
		fields = append(fields, user.FieldTitle)
	}
	if m.is_active != nil {
		fields = append(fields, user.FieldIsActive)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldOrganization:
		return m.Organization()
	case user.FieldTitle:
		return m.Title()
	case user.FieldIsActive:
		return m.IsActive()
	case user.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldOrganization:
		return m.OldOrganization(ctx)
	case user.FieldTitle:
		return m.OldTitle(ctx)
	case user.FieldIsActive:
		return m.OldIsActive(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldOrganization:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganization(v)
		return nil
	case user.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case user.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldOrganization) {
		fields = append(fields, user.FieldOrganization)
	}
	if m.FieldCleared(user.FieldTitle) {
		fields = append(fields, user.FieldTitle)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldOrganization:
		m.ClearOrganization()
		return nil
	case user.FieldTitle:
		m.ClearTitle()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldOrganization:
		m.ResetOrganization()
		return nil
	case user.FieldTitle:
		m.ResetTitle()
		return nil
	case user.FieldIsActive:
		m.ResetIsActive()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.projects != nil {
		edges = append(edges, user.EdgeProjects)
	}
	if m.leader_of_project != nil {
		edges = append(edges, user.EdgeLeaderOfProject)
	}
	if m.coordinator_of_project != nil {
		edges = append(edges, user.EdgeCoordinatorOfProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLeaderOfProject:
		ids := make([]ent.Value, 0, len(m.leader_of_project))
		for id := range m.leader_of_project {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCoordinatorOfProject:
		ids := make([]ent.Value, 0, len(m.coordinator_of_project))
		for id := range m.coordinator_of_project {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedprojects != nil {
		edges = append(edges, user.EdgeProjects)
	}
	if m.removedleader_of_project != nil {
		edges = append(edges, user.EdgeLeaderOfProject)
	}
	if m.removedcoordinator_of_project != nil {
		edges = append(edges, user.EdgeCoordinatorOfProject)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLeaderOfProject:
		ids := make([]ent.Value, 0, len(m.removedleader_of_project))
		for id := range m.removedleader_of_project {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCoordinatorOfProject:
		ids := make([]ent.Value, 0, len(m.removedcoordinator_of_project))
		for id := range m.removedcoordinator_of_project {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprojects {
		edges = append(edges, user.EdgeProjects)
	}
	if m.clearedleader_of_project {
		edges = append(edges, user.EdgeLeaderOfProject)
	}
	if m.clearedcoordinator_of_project {
		edges = append(edges, user.EdgeCoordinatorOfProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeProjects:
		return m.clearedprojects
	case user.EdgeLeaderOfProject:
		return m.clearedleader_of_project
	case user.EdgeCoordinatorOfProject:
		return m.clearedcoordinator_of_project
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeProjects:
		m.ResetProjects()
		return nil
	case user.EdgeLeaderOfProject:
		m.ResetLeaderOfProject()
		return nil
	case user.EdgeCoordinatorOfProject:
		m.ResetCoordinatorOfProject()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
