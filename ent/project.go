// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tarqeem/ims/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Type holds the value of the "type" field.
	Type project.Type `json:"type,omitempty"`
	// ProjectNature holds the value of the "project_nature" field.
	ProjectNature project.ProjectNature `json:"project_nature,omitempty"`
	// DeliveryStrategies holds the value of the "delivery_strategies" field.
	DeliveryStrategies string `json:"delivery_strategies,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// ContractingStrategies holds the value of the "contracting_strategies" field.
	ContractingStrategies string `json:"contracting_strategies,omitempty"`
	// DollarValue holds the value of the "dollar_value" field.
	DollarValue int `json:"dollar_value,omitempty"`
	// ExecutionLocation holds the value of the "execution_location" field.
	ExecutionLocation string `json:"execution_location,omitempty"`
	// Tlsp holds the value of the "tlsp" field.
	Tlsp int `json:"tlsp,omitempty"`
	// Jvp holds the value of the "jvp" field.
	Jvp int `json:"jvp,omitempty"`
	// Ish holds the value of the "ish" field.
	Ish int `json:"ish,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Leader holds the value of the leader edge.
	Leader []*User `json:"leader,omitempty"`
	// Coordinator holds the value of the coordinator edge.
	Coordinator []*User `json:"coordinator,omitempty"`
	// Members holds the value of the members edge.
	Members []*User `json:"members,omitempty"`
	// Issues holds the value of the issues edge.
	Issues []*Issue `json:"issues,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// LeaderOrErr returns the Leader value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) LeaderOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Leader, nil
	}
	return nil, &NotLoadedError{edge: "leader"}
}

// CoordinatorOrErr returns the Coordinator value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) CoordinatorOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Coordinator, nil
	}
	return nil, &NotLoadedError{edge: "coordinator"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) MembersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// IssuesOrErr returns the Issues value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) IssuesOrErr() ([]*Issue, error) {
	if e.loadedTypes[3] {
		return e.Issues, nil
	}
	return nil, &NotLoadedError{edge: "issues"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldID, project.FieldDollarValue, project.FieldTlsp, project.FieldJvp, project.FieldIsh:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldOwner, project.FieldLocation, project.FieldType, project.FieldProjectNature, project.FieldDeliveryStrategies, project.FieldState, project.FieldContractingStrategies, project.FieldExecutionLocation:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				pr.Owner = value.String
			}
		case project.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pr.Location = value.String
			}
		case project.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = project.Type(value.String)
			}
		case project.FieldProjectNature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_nature", values[i])
			} else if value.Valid {
				pr.ProjectNature = project.ProjectNature(value.String)
			}
		case project.FieldDeliveryStrategies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_strategies", values[i])
			} else if value.Valid {
				pr.DeliveryStrategies = value.String
			}
		case project.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				pr.State = value.String
			}
		case project.FieldContractingStrategies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contracting_strategies", values[i])
			} else if value.Valid {
				pr.ContractingStrategies = value.String
			}
		case project.FieldDollarValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dollar_value", values[i])
			} else if value.Valid {
				pr.DollarValue = int(value.Int64)
			}
		case project.FieldExecutionLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_location", values[i])
			} else if value.Valid {
				pr.ExecutionLocation = value.String
			}
		case project.FieldTlsp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tlsp", values[i])
			} else if value.Valid {
				pr.Tlsp = int(value.Int64)
			}
		case project.FieldJvp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jvp", values[i])
			} else if value.Valid {
				pr.Jvp = int(value.Int64)
			}
		case project.FieldIsh:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ish", values[i])
			} else if value.Valid {
				pr.Ish = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryLeader queries the "leader" edge of the Project entity.
func (pr *Project) QueryLeader() *UserQuery {
	return NewProjectClient(pr.config).QueryLeader(pr)
}

// QueryCoordinator queries the "coordinator" edge of the Project entity.
func (pr *Project) QueryCoordinator() *UserQuery {
	return NewProjectClient(pr.config).QueryCoordinator(pr)
}

// QueryMembers queries the "members" edge of the Project entity.
func (pr *Project) QueryMembers() *UserQuery {
	return NewProjectClient(pr.config).QueryMembers(pr)
}

// QueryIssues queries the "issues" edge of the Project entity.
func (pr *Project) QueryIssues() *IssueQuery {
	return NewProjectClient(pr.config).QueryIssues(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(pr.Owner)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pr.Location)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", ")
	builder.WriteString("project_nature=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProjectNature))
	builder.WriteString(", ")
	builder.WriteString("delivery_strategies=")
	builder.WriteString(pr.DeliveryStrategies)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(pr.State)
	builder.WriteString(", ")
	builder.WriteString("contracting_strategies=")
	builder.WriteString(pr.ContractingStrategies)
	builder.WriteString(", ")
	builder.WriteString("dollar_value=")
	builder.WriteString(fmt.Sprintf("%v", pr.DollarValue))
	builder.WriteString(", ")
	builder.WriteString("execution_location=")
	builder.WriteString(pr.ExecutionLocation)
	builder.WriteString(", ")
	builder.WriteString("tlsp=")
	builder.WriteString(fmt.Sprintf("%v", pr.Tlsp))
	builder.WriteString(", ")
	builder.WriteString("jvp=")
	builder.WriteString(fmt.Sprintf("%v", pr.Jvp))
	builder.WriteString(", ")
	builder.WriteString("ish=")
	builder.WriteString(fmt.Sprintf("%v", pr.Ish))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
