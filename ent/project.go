// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tarqeem/ims/ent/project"
	"github.com/tarqeem/ims/ent/user"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// ProjectNature holds the value of the "Project_nature" field.
	ProjectNature project.ProjectNature `json:"Project_nature,omitempty"`
	// TopLevelPackagesNumber holds the value of the "top_level_packages_number" field.
	TopLevelPackagesNumber int `json:"top_level_packages_number,omitempty"`
	// JointVentureNumber holds the value of the "joint_venture_number" field.
	JointVentureNumber int `json:"joint_venture_number,omitempty"`
	// ExecutionLocation holds the value of the "execution_location" field.
	ExecutionLocation string `json:"execution_location,omitempty"`
	// InvolvedStockholders holds the value of the "involved_stockholders" field.
	InvolvedStockholders int `json:"involved_stockholders,omitempty"`
	// DollarValue holds the value of the "dollar_value" field.
	DollarValue int `json:"dollar_value,omitempty"`
	// Stage holds the value of the "stage" field.
	Stage string `json:"stage,omitempty"`
	// DeliveryStratigies holds the value of the "delivery_stratigies" field.
	DeliveryStratigies string `json:"delivery_stratigies,omitempty"`
	// ContractingStratigies holds the value of the "contracting_stratigies" field.
	ContractingStratigies string `json:"contracting_stratigies,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges         ProjectEdges `json:"edges"`
	user_projects *int
	selectValues  sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldID, project.FieldTopLevelPackagesNumber, project.FieldJointVentureNumber, project.FieldInvolvedStockholders, project.FieldDollarValue:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldOwner, project.FieldLocation, project.FieldType, project.FieldProjectNature, project.FieldExecutionLocation, project.FieldStage, project.FieldDeliveryStratigies, project.FieldContractingStratigies:
			values[i] = new(sql.NullString)
		case project.ForeignKeys[0]: // user_projects
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				pr.Owner = value.String
			}
		case project.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pr.Location = value.String
			}
		case project.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = value.String
			}
		case project.FieldProjectNature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Project_nature", values[i])
			} else if value.Valid {
				pr.ProjectNature = project.ProjectNature(value.String)
			}
		case project.FieldTopLevelPackagesNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field top_level_packages_number", values[i])
			} else if value.Valid {
				pr.TopLevelPackagesNumber = int(value.Int64)
			}
		case project.FieldJointVentureNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field joint_venture_number", values[i])
			} else if value.Valid {
				pr.JointVentureNumber = int(value.Int64)
			}
		case project.FieldExecutionLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_location", values[i])
			} else if value.Valid {
				pr.ExecutionLocation = value.String
			}
		case project.FieldInvolvedStockholders:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field involved_stockholders", values[i])
			} else if value.Valid {
				pr.InvolvedStockholders = int(value.Int64)
			}
		case project.FieldDollarValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dollar_value", values[i])
			} else if value.Valid {
				pr.DollarValue = int(value.Int64)
			}
		case project.FieldStage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stage", values[i])
			} else if value.Valid {
				pr.Stage = value.String
			}
		case project.FieldDeliveryStratigies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_stratigies", values[i])
			} else if value.Valid {
				pr.DeliveryStratigies = value.String
			}
		case project.FieldContractingStratigies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contracting_stratigies", values[i])
			} else if value.Valid {
				pr.ContractingStratigies = value.String
			}
		case project.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_projects", value)
			} else if value.Valid {
				pr.user_projects = new(int)
				*pr.user_projects = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Project entity.
func (pr *Project) QueryUser() *UserQuery {
	return NewProjectClient(pr.config).QueryUser(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(pr.Owner)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pr.Location)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pr.Type)
	builder.WriteString(", ")
	builder.WriteString("Project_nature=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProjectNature))
	builder.WriteString(", ")
	builder.WriteString("top_level_packages_number=")
	builder.WriteString(fmt.Sprintf("%v", pr.TopLevelPackagesNumber))
	builder.WriteString(", ")
	builder.WriteString("joint_venture_number=")
	builder.WriteString(fmt.Sprintf("%v", pr.JointVentureNumber))
	builder.WriteString(", ")
	builder.WriteString("execution_location=")
	builder.WriteString(pr.ExecutionLocation)
	builder.WriteString(", ")
	builder.WriteString("involved_stockholders=")
	builder.WriteString(fmt.Sprintf("%v", pr.InvolvedStockholders))
	builder.WriteString(", ")
	builder.WriteString("dollar_value=")
	builder.WriteString(fmt.Sprintf("%v", pr.DollarValue))
	builder.WriteString(", ")
	builder.WriteString("stage=")
	builder.WriteString(pr.Stage)
	builder.WriteString(", ")
	builder.WriteString("delivery_stratigies=")
	builder.WriteString(pr.DeliveryStratigies)
	builder.WriteString(", ")
	builder.WriteString("contracting_stratigies=")
	builder.WriteString(pr.ContractingStratigies)
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
