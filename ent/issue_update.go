// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarqeem/ims/ent/comment"
	"github.com/tarqeem/ims/ent/file"
	"github.com/tarqeem/ims/ent/issue"
	"github.com/tarqeem/ims/ent/predicate"
	"github.com/tarqeem/ims/ent/project"
)

// IssueUpdate is the builder for updating Issue entities.
type IssueUpdate struct {
	config
	hooks    []Hook
	mutation *IssueMutation
}

// Where appends a list predicates to the IssueUpdate builder.
func (iu *IssueUpdate) Where(ps ...predicate.Issue) *IssueUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetTitle sets the "title" field.
func (iu *IssueUpdate) SetTitle(s string) *IssueUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableTitle(s *string) *IssueUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *IssueUpdate) SetDescription(s string) *IssueUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableDescription(s *string) *IssueUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetCreator sets the "Creator" field.
func (iu *IssueUpdate) SetCreator(s string) *IssueUpdate {
	iu.mutation.SetCreator(s)
	return iu
}

// SetNillableCreator sets the "Creator" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableCreator(s *string) *IssueUpdate {
	if s != nil {
		iu.SetCreator(*s)
	}
	return iu
}

// SetStatus sets the "status" field.
func (iu *IssueUpdate) SetStatus(i issue.Status) *IssueUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableStatus(i *issue.Status) *IssueUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// SetDate sets the "date" field.
func (iu *IssueUpdate) SetDate(s string) *IssueUpdate {
	iu.mutation.SetDate(s)
	return iu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableDate(s *string) *IssueUpdate {
	if s != nil {
		iu.SetDate(*s)
	}
	return iu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (iu *IssueUpdate) SetProjectID(id int) *IssueUpdate {
	iu.mutation.SetProjectID(id)
	return iu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (iu *IssueUpdate) SetNillableProjectID(id *int) *IssueUpdate {
	if id != nil {
		iu = iu.SetProjectID(*id)
	}
	return iu
}

// SetProject sets the "project" edge to the Project entity.
func (iu *IssueUpdate) SetProject(p *Project) *IssueUpdate {
	return iu.SetProjectID(p.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (iu *IssueUpdate) AddCommentIDs(ids ...int) *IssueUpdate {
	iu.mutation.AddCommentIDs(ids...)
	return iu
}

// AddComments adds the "comments" edges to the Comment entity.
func (iu *IssueUpdate) AddComments(c ...*Comment) *IssueUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCommentIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (iu *IssueUpdate) AddFileIDs(ids ...int) *IssueUpdate {
	iu.mutation.AddFileIDs(ids...)
	return iu
}

// AddFiles adds the "files" edges to the File entity.
func (iu *IssueUpdate) AddFiles(f ...*File) *IssueUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iu.AddFileIDs(ids...)
}

// Mutation returns the IssueMutation object of the builder.
func (iu *IssueUpdate) Mutation() *IssueMutation {
	return iu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (iu *IssueUpdate) ClearProject() *IssueUpdate {
	iu.mutation.ClearProject()
	return iu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (iu *IssueUpdate) ClearComments() *IssueUpdate {
	iu.mutation.ClearComments()
	return iu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (iu *IssueUpdate) RemoveCommentIDs(ids ...int) *IssueUpdate {
	iu.mutation.RemoveCommentIDs(ids...)
	return iu
}

// RemoveComments removes "comments" edges to Comment entities.
func (iu *IssueUpdate) RemoveComments(c ...*Comment) *IssueUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCommentIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (iu *IssueUpdate) ClearFiles() *IssueUpdate {
	iu.mutation.ClearFiles()
	return iu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (iu *IssueUpdate) RemoveFileIDs(ids ...int) *IssueUpdate {
	iu.mutation.RemoveFileIDs(ids...)
	return iu
}

// RemoveFiles removes "files" edges to File entities.
func (iu *IssueUpdate) RemoveFiles(f ...*File) *IssueUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IssueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IssueUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IssueUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IssueUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IssueUpdate) check() error {
	if v, ok := iu.mutation.Status(); ok {
		if err := issue.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Issue.status": %w`, err)}
		}
	}
	return nil
}

func (iu *IssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(issue.Table, issue.Columns, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(issue.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.Creator(); ok {
		_spec.SetField(issue.FieldCreator, field.TypeString, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(issue.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.Date(); ok {
		_spec.SetField(issue.FieldDate, field.TypeString, value)
	}
	if iu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ProjectTable,
			Columns: []string{issue.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ProjectTable,
			Columns: []string{issue.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: issue.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: issue.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: issue.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.FilesTable,
			Columns: issue.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !iu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.FilesTable,
			Columns: issue.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.FilesTable,
			Columns: issue.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IssueUpdateOne is the builder for updating a single Issue entity.
type IssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueMutation
}

// SetTitle sets the "title" field.
func (iuo *IssueUpdateOne) SetTitle(s string) *IssueUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableTitle(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IssueUpdateOne) SetDescription(s string) *IssueUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableDescription(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetCreator sets the "Creator" field.
func (iuo *IssueUpdateOne) SetCreator(s string) *IssueUpdateOne {
	iuo.mutation.SetCreator(s)
	return iuo
}

// SetNillableCreator sets the "Creator" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableCreator(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetCreator(*s)
	}
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *IssueUpdateOne) SetStatus(i issue.Status) *IssueUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableStatus(i *issue.Status) *IssueUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// SetDate sets the "date" field.
func (iuo *IssueUpdateOne) SetDate(s string) *IssueUpdateOne {
	iuo.mutation.SetDate(s)
	return iuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableDate(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetDate(*s)
	}
	return iuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (iuo *IssueUpdateOne) SetProjectID(id int) *IssueUpdateOne {
	iuo.mutation.SetProjectID(id)
	return iuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableProjectID(id *int) *IssueUpdateOne {
	if id != nil {
		iuo = iuo.SetProjectID(*id)
	}
	return iuo
}

// SetProject sets the "project" edge to the Project entity.
func (iuo *IssueUpdateOne) SetProject(p *Project) *IssueUpdateOne {
	return iuo.SetProjectID(p.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (iuo *IssueUpdateOne) AddCommentIDs(ids ...int) *IssueUpdateOne {
	iuo.mutation.AddCommentIDs(ids...)
	return iuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (iuo *IssueUpdateOne) AddComments(c ...*Comment) *IssueUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCommentIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (iuo *IssueUpdateOne) AddFileIDs(ids ...int) *IssueUpdateOne {
	iuo.mutation.AddFileIDs(ids...)
	return iuo
}

// AddFiles adds the "files" edges to the File entity.
func (iuo *IssueUpdateOne) AddFiles(f ...*File) *IssueUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iuo.AddFileIDs(ids...)
}

// Mutation returns the IssueMutation object of the builder.
func (iuo *IssueUpdateOne) Mutation() *IssueMutation {
	return iuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (iuo *IssueUpdateOne) ClearProject() *IssueUpdateOne {
	iuo.mutation.ClearProject()
	return iuo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (iuo *IssueUpdateOne) ClearComments() *IssueUpdateOne {
	iuo.mutation.ClearComments()
	return iuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (iuo *IssueUpdateOne) RemoveCommentIDs(ids ...int) *IssueUpdateOne {
	iuo.mutation.RemoveCommentIDs(ids...)
	return iuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (iuo *IssueUpdateOne) RemoveComments(c ...*Comment) *IssueUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCommentIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (iuo *IssueUpdateOne) ClearFiles() *IssueUpdateOne {
	iuo.mutation.ClearFiles()
	return iuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (iuo *IssueUpdateOne) RemoveFileIDs(ids ...int) *IssueUpdateOne {
	iuo.mutation.RemoveFileIDs(ids...)
	return iuo
}

// RemoveFiles removes "files" edges to File entities.
func (iuo *IssueUpdateOne) RemoveFiles(f ...*File) *IssueUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the IssueUpdate builder.
func (iuo *IssueUpdateOne) Where(ps ...predicate.Issue) *IssueUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IssueUpdateOne) Select(field string, fields ...string) *IssueUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Issue entity.
func (iuo *IssueUpdateOne) Save(ctx context.Context) (*Issue, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IssueUpdateOne) SaveX(ctx context.Context) *Issue {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IssueUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IssueUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IssueUpdateOne) check() error {
	if v, ok := iuo.mutation.Status(); ok {
		if err := issue.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Issue.status": %w`, err)}
		}
	}
	return nil
}

func (iuo *IssueUpdateOne) sqlSave(ctx context.Context) (_node *Issue, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(issue.Table, issue.Columns, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Issue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issue.FieldID)
		for _, f := range fields {
			if !issue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(issue.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Creator(); ok {
		_spec.SetField(issue.FieldCreator, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(issue.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.Date(); ok {
		_spec.SetField(issue.FieldDate, field.TypeString, value)
	}
	if iuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ProjectTable,
			Columns: []string{issue.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ProjectTable,
			Columns: []string{issue.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: issue.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: issue.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: issue.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.FilesTable,
			Columns: issue.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !iuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.FilesTable,
			Columns: issue.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.FilesTable,
			Columns: issue.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Issue{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
