// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarqeem/ims/ent/issue"
	"github.com/tarqeem/ims/ent/project"
	"github.com/tarqeem/ims/ent/user"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetOwner sets the "owner" field.
func (pc *ProjectCreate) SetOwner(s string) *ProjectCreate {
	pc.mutation.SetOwner(s)
	return pc
}

// SetLocation sets the "location" field.
func (pc *ProjectCreate) SetLocation(s string) *ProjectCreate {
	pc.mutation.SetLocation(s)
	return pc
}

// SetType sets the "type" field.
func (pc *ProjectCreate) SetType(pr project.Type) *ProjectCreate {
	pc.mutation.SetType(pr)
	return pc
}

// SetProjectNature sets the "project_nature" field.
func (pc *ProjectCreate) SetProjectNature(pn project.ProjectNature) *ProjectCreate {
	pc.mutation.SetProjectNature(pn)
	return pc
}

// SetDeliveryStrategies sets the "delivery_strategies" field.
func (pc *ProjectCreate) SetDeliveryStrategies(s string) *ProjectCreate {
	pc.mutation.SetDeliveryStrategies(s)
	return pc
}

// SetState sets the "state" field.
func (pc *ProjectCreate) SetState(s string) *ProjectCreate {
	pc.mutation.SetState(s)
	return pc
}

// SetContractingStrategies sets the "contracting_strategies" field.
func (pc *ProjectCreate) SetContractingStrategies(s string) *ProjectCreate {
	pc.mutation.SetContractingStrategies(s)
	return pc
}

// SetDollarValue sets the "dollar_value" field.
func (pc *ProjectCreate) SetDollarValue(i int) *ProjectCreate {
	pc.mutation.SetDollarValue(i)
	return pc
}

// SetExecutionLocation sets the "execution_location" field.
func (pc *ProjectCreate) SetExecutionLocation(s string) *ProjectCreate {
	pc.mutation.SetExecutionLocation(s)
	return pc
}

// SetTlsp sets the "tlsp" field.
func (pc *ProjectCreate) SetTlsp(i int) *ProjectCreate {
	pc.mutation.SetTlsp(i)
	return pc
}

// SetNillableTlsp sets the "tlsp" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableTlsp(i *int) *ProjectCreate {
	if i != nil {
		pc.SetTlsp(*i)
	}
	return pc
}

// SetJvp sets the "jvp" field.
func (pc *ProjectCreate) SetJvp(i int) *ProjectCreate {
	pc.mutation.SetJvp(i)
	return pc
}

// SetNillableJvp sets the "jvp" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableJvp(i *int) *ProjectCreate {
	if i != nil {
		pc.SetJvp(*i)
	}
	return pc
}

// SetIsh sets the "ish" field.
func (pc *ProjectCreate) SetIsh(i int) *ProjectCreate {
	pc.mutation.SetIsh(i)
	return pc
}

// SetNillableIsh sets the "ish" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableIsh(i *int) *ProjectCreate {
	if i != nil {
		pc.SetIsh(*i)
	}
	return pc
}

// AddLeaderIDs adds the "leader" edge to the User entity by IDs.
func (pc *ProjectCreate) AddLeaderIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddLeaderIDs(ids...)
	return pc
}

// AddLeader adds the "leader" edges to the User entity.
func (pc *ProjectCreate) AddLeader(u ...*User) *ProjectCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddLeaderIDs(ids...)
}

// AddCoordinatorIDs adds the "coordinator" edge to the User entity by IDs.
func (pc *ProjectCreate) AddCoordinatorIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddCoordinatorIDs(ids...)
	return pc
}

// AddCoordinator adds the "coordinator" edges to the User entity.
func (pc *ProjectCreate) AddCoordinator(u ...*User) *ProjectCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddCoordinatorIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (pc *ProjectCreate) AddMemberIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddMemberIDs(ids...)
	return pc
}

// AddMembers adds the "members" edges to the User entity.
func (pc *ProjectCreate) AddMembers(u ...*User) *ProjectCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddMemberIDs(ids...)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (pc *ProjectCreate) AddIssueIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddIssueIDs(ids...)
	return pc
}

// AddIssues adds the "issues" edges to the Issue entity.
func (pc *ProjectCreate) AddIssues(i ...*Issue) *ProjectCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddIssueIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.Tlsp(); !ok {
		v := project.DefaultTlsp
		pc.mutation.SetTlsp(v)
	}
	if _, ok := pc.mutation.Jvp(); !ok {
		v := project.DefaultJvp
		pc.mutation.SetJvp(v)
	}
	if _, ok := pc.mutation.Ish(); !ok {
		v := project.DefaultIsh
		pc.mutation.SetIsh(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if _, ok := pc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Project.owner"`)}
	}
	if _, ok := pc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Project.location"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Project.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ProjectNature(); !ok {
		return &ValidationError{Name: "project_nature", err: errors.New(`ent: missing required field "Project.project_nature"`)}
	}
	if v, ok := pc.mutation.ProjectNature(); ok {
		if err := project.ProjectNatureValidator(v); err != nil {
			return &ValidationError{Name: "project_nature", err: fmt.Errorf(`ent: validator failed for field "Project.project_nature": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DeliveryStrategies(); !ok {
		return &ValidationError{Name: "delivery_strategies", err: errors.New(`ent: missing required field "Project.delivery_strategies"`)}
	}
	if v, ok := pc.mutation.DeliveryStrategies(); ok {
		if err := project.DeliveryStrategiesValidator(v); err != nil {
			return &ValidationError{Name: "delivery_strategies", err: fmt.Errorf(`ent: validator failed for field "Project.delivery_strategies": %w`, err)}
		}
	}
	if _, ok := pc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Project.state"`)}
	}
	if v, ok := pc.mutation.State(); ok {
		if err := project.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Project.state": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ContractingStrategies(); !ok {
		return &ValidationError{Name: "contracting_strategies", err: errors.New(`ent: missing required field "Project.contracting_strategies"`)}
	}
	if v, ok := pc.mutation.ContractingStrategies(); ok {
		if err := project.ContractingStrategiesValidator(v); err != nil {
			return &ValidationError{Name: "contracting_strategies", err: fmt.Errorf(`ent: validator failed for field "Project.contracting_strategies": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DollarValue(); !ok {
		return &ValidationError{Name: "dollar_value", err: errors.New(`ent: missing required field "Project.dollar_value"`)}
	}
	if v, ok := pc.mutation.DollarValue(); ok {
		if err := project.DollarValueValidator(v); err != nil {
			return &ValidationError{Name: "dollar_value", err: fmt.Errorf(`ent: validator failed for field "Project.dollar_value": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ExecutionLocation(); !ok {
		return &ValidationError{Name: "execution_location", err: errors.New(`ent: missing required field "Project.execution_location"`)}
	}
	if _, ok := pc.mutation.Tlsp(); !ok {
		return &ValidationError{Name: "tlsp", err: errors.New(`ent: missing required field "Project.tlsp"`)}
	}
	if v, ok := pc.mutation.Tlsp(); ok {
		if err := project.TlspValidator(v); err != nil {
			return &ValidationError{Name: "tlsp", err: fmt.Errorf(`ent: validator failed for field "Project.tlsp": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Jvp(); !ok {
		return &ValidationError{Name: "jvp", err: errors.New(`ent: missing required field "Project.jvp"`)}
	}
	if v, ok := pc.mutation.Jvp(); ok {
		if err := project.JvpValidator(v); err != nil {
			return &ValidationError{Name: "jvp", err: fmt.Errorf(`ent: validator failed for field "Project.jvp": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Ish(); !ok {
		return &ValidationError{Name: "ish", err: errors.New(`ent: missing required field "Project.ish"`)}
	}
	if v, ok := pc.mutation.Ish(); ok {
		if err := project.IshValidator(v); err != nil {
			return &ValidationError{Name: "ish", err: fmt.Errorf(`ent: validator failed for field "Project.ish": %w`, err)}
		}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := pc.mutation.Location(); ok {
		_spec.SetField(project.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.ProjectNature(); ok {
		_spec.SetField(project.FieldProjectNature, field.TypeEnum, value)
		_node.ProjectNature = value
	}
	if value, ok := pc.mutation.DeliveryStrategies(); ok {
		_spec.SetField(project.FieldDeliveryStrategies, field.TypeString, value)
		_node.DeliveryStrategies = value
	}
	if value, ok := pc.mutation.State(); ok {
		_spec.SetField(project.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := pc.mutation.ContractingStrategies(); ok {
		_spec.SetField(project.FieldContractingStrategies, field.TypeString, value)
		_node.ContractingStrategies = value
	}
	if value, ok := pc.mutation.DollarValue(); ok {
		_spec.SetField(project.FieldDollarValue, field.TypeInt, value)
		_node.DollarValue = value
	}
	if value, ok := pc.mutation.ExecutionLocation(); ok {
		_spec.SetField(project.FieldExecutionLocation, field.TypeString, value)
		_node.ExecutionLocation = value
	}
	if value, ok := pc.mutation.Tlsp(); ok {
		_spec.SetField(project.FieldTlsp, field.TypeInt, value)
		_node.Tlsp = value
	}
	if value, ok := pc.mutation.Jvp(); ok {
		_spec.SetField(project.FieldJvp, field.TypeInt, value)
		_node.Jvp = value
	}
	if value, ok := pc.mutation.Ish(); ok {
		_spec.SetField(project.FieldIsh, field.TypeInt, value)
		_node.Ish = value
	}
	if nodes := pc.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CoordinatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.IssuesTable,
			Columns: []string{project.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
