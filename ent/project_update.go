// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarqeem/ims/ent/predicate"
	"github.com/tarqeem/ims/ent/project"
	"github.com/tarqeem/ims/ent/user"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetOwner sets the "owner" field.
func (pu *ProjectUpdate) SetOwner(s string) *ProjectUpdate {
	pu.mutation.SetOwner(s)
	return pu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwner(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetOwner(*s)
	}
	return pu
}

// SetLocation sets the "location" field.
func (pu *ProjectUpdate) SetLocation(s string) *ProjectUpdate {
	pu.mutation.SetLocation(s)
	return pu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableLocation(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetLocation(*s)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *ProjectUpdate) SetType(pr project.Type) *ProjectUpdate {
	pu.mutation.SetType(pr)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableType(pr *project.Type) *ProjectUpdate {
	if pr != nil {
		pu.SetType(*pr)
	}
	return pu
}

// SetProjectNature sets the "project_nature" field.
func (pu *ProjectUpdate) SetProjectNature(pn project.ProjectNature) *ProjectUpdate {
	pu.mutation.SetProjectNature(pn)
	return pu
}

// SetNillableProjectNature sets the "project_nature" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableProjectNature(pn *project.ProjectNature) *ProjectUpdate {
	if pn != nil {
		pu.SetProjectNature(*pn)
	}
	return pu
}

// SetDeliveryStrategies sets the "delivery_strategies" field.
func (pu *ProjectUpdate) SetDeliveryStrategies(s string) *ProjectUpdate {
	pu.mutation.SetDeliveryStrategies(s)
	return pu
}

// SetNillableDeliveryStrategies sets the "delivery_strategies" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDeliveryStrategies(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDeliveryStrategies(*s)
	}
	return pu
}

// SetState sets the "state" field.
func (pu *ProjectUpdate) SetState(s string) *ProjectUpdate {
	pu.mutation.SetState(s)
	return pu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableState(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetState(*s)
	}
	return pu
}

// SetContractingStrategies sets the "contracting_strategies" field.
func (pu *ProjectUpdate) SetContractingStrategies(s string) *ProjectUpdate {
	pu.mutation.SetContractingStrategies(s)
	return pu
}

// SetNillableContractingStrategies sets the "contracting_strategies" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractingStrategies(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetContractingStrategies(*s)
	}
	return pu
}

// SetDollarValue sets the "dollar_value" field.
func (pu *ProjectUpdate) SetDollarValue(i int) *ProjectUpdate {
	pu.mutation.ResetDollarValue()
	pu.mutation.SetDollarValue(i)
	return pu
}

// SetNillableDollarValue sets the "dollar_value" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDollarValue(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDollarValue(*i)
	}
	return pu
}

// AddDollarValue adds i to the "dollar_value" field.
func (pu *ProjectUpdate) AddDollarValue(i int) *ProjectUpdate {
	pu.mutation.AddDollarValue(i)
	return pu
}

// SetExecutionLocation sets the "execution_location" field.
func (pu *ProjectUpdate) SetExecutionLocation(s string) *ProjectUpdate {
	pu.mutation.SetExecutionLocation(s)
	return pu
}

// SetNillableExecutionLocation sets the "execution_location" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableExecutionLocation(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetExecutionLocation(*s)
	}
	return pu
}

// AddLeaderIDs adds the "leader" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddLeaderIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddLeaderIDs(ids...)
	return pu
}

// AddLeader adds the "leader" edges to the User entity.
func (pu *ProjectUpdate) AddLeader(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddLeaderIDs(ids...)
}

// AddCoordinatorIDs adds the "coordinator" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddCoordinatorIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddCoordinatorIDs(ids...)
	return pu
}

// AddCoordinator adds the "coordinator" edges to the User entity.
func (pu *ProjectUpdate) AddCoordinator(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddCoordinatorIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddMemberIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddMemberIDs(ids...)
	return pu
}

// AddMembers adds the "members" edges to the User entity.
func (pu *ProjectUpdate) AddMembers(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddMemberIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearLeader clears all "leader" edges to the User entity.
func (pu *ProjectUpdate) ClearLeader() *ProjectUpdate {
	pu.mutation.ClearLeader()
	return pu
}

// RemoveLeaderIDs removes the "leader" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveLeaderIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveLeaderIDs(ids...)
	return pu
}

// RemoveLeader removes "leader" edges to User entities.
func (pu *ProjectUpdate) RemoveLeader(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveLeaderIDs(ids...)
}

// ClearCoordinator clears all "coordinator" edges to the User entity.
func (pu *ProjectUpdate) ClearCoordinator() *ProjectUpdate {
	pu.mutation.ClearCoordinator()
	return pu
}

// RemoveCoordinatorIDs removes the "coordinator" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveCoordinatorIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveCoordinatorIDs(ids...)
	return pu
}

// RemoveCoordinator removes "coordinator" edges to User entities.
func (pu *ProjectUpdate) RemoveCoordinator(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveCoordinatorIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (pu *ProjectUpdate) ClearMembers() *ProjectUpdate {
	pu.mutation.ClearMembers()
	return pu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveMemberIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveMemberIDs(ids...)
	return pu
}

// RemoveMembers removes "members" edges to User entities.
func (pu *ProjectUpdate) RemoveMembers(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProjectNature(); ok {
		if err := project.ProjectNatureValidator(v); err != nil {
			return &ValidationError{Name: "project_nature", err: fmt.Errorf(`ent: validator failed for field "Project.project_nature": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DeliveryStrategies(); ok {
		if err := project.DeliveryStrategiesValidator(v); err != nil {
			return &ValidationError{Name: "delivery_strategies", err: fmt.Errorf(`ent: validator failed for field "Project.delivery_strategies": %w`, err)}
		}
	}
	if v, ok := pu.mutation.State(); ok {
		if err := project.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Project.state": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ContractingStrategies(); ok {
		if err := project.ContractingStrategiesValidator(v); err != nil {
			return &ValidationError{Name: "contracting_strategies", err: fmt.Errorf(`ent: validator failed for field "Project.contracting_strategies": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DollarValue(); ok {
		if err := project.DollarValueValidator(v); err != nil {
			return &ValidationError{Name: "dollar_value", err: fmt.Errorf(`ent: validator failed for field "Project.dollar_value": %w`, err)}
		}
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(project.FieldLocation, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.ProjectNature(); ok {
		_spec.SetField(project.FieldProjectNature, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.DeliveryStrategies(); ok {
		_spec.SetField(project.FieldDeliveryStrategies, field.TypeString, value)
	}
	if value, ok := pu.mutation.State(); ok {
		_spec.SetField(project.FieldState, field.TypeString, value)
	}
	if value, ok := pu.mutation.ContractingStrategies(); ok {
		_spec.SetField(project.FieldContractingStrategies, field.TypeString, value)
	}
	if value, ok := pu.mutation.DollarValue(); ok {
		_spec.SetField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDollarValue(); ok {
		_spec.AddField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ExecutionLocation(); ok {
		_spec.SetField(project.FieldExecutionLocation, field.TypeString, value)
	}
	if pu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLeaderIDs(); len(nodes) > 0 && !pu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CoordinatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCoordinatorIDs(); len(nodes) > 0 && !pu.mutation.CoordinatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CoordinatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetOwner sets the "owner" field.
func (puo *ProjectUpdateOne) SetOwner(s string) *ProjectUpdateOne {
	puo.mutation.SetOwner(s)
	return puo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwner(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetOwner(*s)
	}
	return puo
}

// SetLocation sets the "location" field.
func (puo *ProjectUpdateOne) SetLocation(s string) *ProjectUpdateOne {
	puo.mutation.SetLocation(s)
	return puo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableLocation(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetLocation(*s)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *ProjectUpdateOne) SetType(pr project.Type) *ProjectUpdateOne {
	puo.mutation.SetType(pr)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableType(pr *project.Type) *ProjectUpdateOne {
	if pr != nil {
		puo.SetType(*pr)
	}
	return puo
}

// SetProjectNature sets the "project_nature" field.
func (puo *ProjectUpdateOne) SetProjectNature(pn project.ProjectNature) *ProjectUpdateOne {
	puo.mutation.SetProjectNature(pn)
	return puo
}

// SetNillableProjectNature sets the "project_nature" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableProjectNature(pn *project.ProjectNature) *ProjectUpdateOne {
	if pn != nil {
		puo.SetProjectNature(*pn)
	}
	return puo
}

// SetDeliveryStrategies sets the "delivery_strategies" field.
func (puo *ProjectUpdateOne) SetDeliveryStrategies(s string) *ProjectUpdateOne {
	puo.mutation.SetDeliveryStrategies(s)
	return puo
}

// SetNillableDeliveryStrategies sets the "delivery_strategies" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDeliveryStrategies(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDeliveryStrategies(*s)
	}
	return puo
}

// SetState sets the "state" field.
func (puo *ProjectUpdateOne) SetState(s string) *ProjectUpdateOne {
	puo.mutation.SetState(s)
	return puo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableState(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetState(*s)
	}
	return puo
}

// SetContractingStrategies sets the "contracting_strategies" field.
func (puo *ProjectUpdateOne) SetContractingStrategies(s string) *ProjectUpdateOne {
	puo.mutation.SetContractingStrategies(s)
	return puo
}

// SetNillableContractingStrategies sets the "contracting_strategies" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractingStrategies(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetContractingStrategies(*s)
	}
	return puo
}

// SetDollarValue sets the "dollar_value" field.
func (puo *ProjectUpdateOne) SetDollarValue(i int) *ProjectUpdateOne {
	puo.mutation.ResetDollarValue()
	puo.mutation.SetDollarValue(i)
	return puo
}

// SetNillableDollarValue sets the "dollar_value" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDollarValue(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDollarValue(*i)
	}
	return puo
}

// AddDollarValue adds i to the "dollar_value" field.
func (puo *ProjectUpdateOne) AddDollarValue(i int) *ProjectUpdateOne {
	puo.mutation.AddDollarValue(i)
	return puo
}

// SetExecutionLocation sets the "execution_location" field.
func (puo *ProjectUpdateOne) SetExecutionLocation(s string) *ProjectUpdateOne {
	puo.mutation.SetExecutionLocation(s)
	return puo
}

// SetNillableExecutionLocation sets the "execution_location" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableExecutionLocation(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetExecutionLocation(*s)
	}
	return puo
}

// AddLeaderIDs adds the "leader" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddLeaderIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddLeaderIDs(ids...)
	return puo
}

// AddLeader adds the "leader" edges to the User entity.
func (puo *ProjectUpdateOne) AddLeader(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddLeaderIDs(ids...)
}

// AddCoordinatorIDs adds the "coordinator" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddCoordinatorIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddCoordinatorIDs(ids...)
	return puo
}

// AddCoordinator adds the "coordinator" edges to the User entity.
func (puo *ProjectUpdateOne) AddCoordinator(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddCoordinatorIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddMemberIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddMemberIDs(ids...)
	return puo
}

// AddMembers adds the "members" edges to the User entity.
func (puo *ProjectUpdateOne) AddMembers(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddMemberIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearLeader clears all "leader" edges to the User entity.
func (puo *ProjectUpdateOne) ClearLeader() *ProjectUpdateOne {
	puo.mutation.ClearLeader()
	return puo
}

// RemoveLeaderIDs removes the "leader" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveLeaderIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveLeaderIDs(ids...)
	return puo
}

// RemoveLeader removes "leader" edges to User entities.
func (puo *ProjectUpdateOne) RemoveLeader(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveLeaderIDs(ids...)
}

// ClearCoordinator clears all "coordinator" edges to the User entity.
func (puo *ProjectUpdateOne) ClearCoordinator() *ProjectUpdateOne {
	puo.mutation.ClearCoordinator()
	return puo
}

// RemoveCoordinatorIDs removes the "coordinator" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveCoordinatorIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveCoordinatorIDs(ids...)
	return puo
}

// RemoveCoordinator removes "coordinator" edges to User entities.
func (puo *ProjectUpdateOne) RemoveCoordinator(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveCoordinatorIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (puo *ProjectUpdateOne) ClearMembers() *ProjectUpdateOne {
	puo.mutation.ClearMembers()
	return puo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveMemberIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveMemberIDs(ids...)
	return puo
}

// RemoveMembers removes "members" edges to User entities.
func (puo *ProjectUpdateOne) RemoveMembers(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProjectNature(); ok {
		if err := project.ProjectNatureValidator(v); err != nil {
			return &ValidationError{Name: "project_nature", err: fmt.Errorf(`ent: validator failed for field "Project.project_nature": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DeliveryStrategies(); ok {
		if err := project.DeliveryStrategiesValidator(v); err != nil {
			return &ValidationError{Name: "delivery_strategies", err: fmt.Errorf(`ent: validator failed for field "Project.delivery_strategies": %w`, err)}
		}
	}
	if v, ok := puo.mutation.State(); ok {
		if err := project.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Project.state": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ContractingStrategies(); ok {
		if err := project.ContractingStrategiesValidator(v); err != nil {
			return &ValidationError{Name: "contracting_strategies", err: fmt.Errorf(`ent: validator failed for field "Project.contracting_strategies": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DollarValue(); ok {
		if err := project.DollarValueValidator(v); err != nil {
			return &ValidationError{Name: "dollar_value", err: fmt.Errorf(`ent: validator failed for field "Project.dollar_value": %w`, err)}
		}
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(project.FieldLocation, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.ProjectNature(); ok {
		_spec.SetField(project.FieldProjectNature, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.DeliveryStrategies(); ok {
		_spec.SetField(project.FieldDeliveryStrategies, field.TypeString, value)
	}
	if value, ok := puo.mutation.State(); ok {
		_spec.SetField(project.FieldState, field.TypeString, value)
	}
	if value, ok := puo.mutation.ContractingStrategies(); ok {
		_spec.SetField(project.FieldContractingStrategies, field.TypeString, value)
	}
	if value, ok := puo.mutation.DollarValue(); ok {
		_spec.SetField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDollarValue(); ok {
		_spec.AddField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ExecutionLocation(); ok {
		_spec.SetField(project.FieldExecutionLocation, field.TypeString, value)
	}
	if puo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLeaderIDs(); len(nodes) > 0 && !puo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LeaderTable,
			Columns: project.LeaderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CoordinatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCoordinatorIDs(); len(nodes) > 0 && !puo.mutation.CoordinatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CoordinatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CoordinatorTable,
			Columns: project.CoordinatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
