// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarqeem/ims/ent/predicate"
	"github.com/tarqeem/ims/ent/project"
	"github.com/tarqeem/ims/ent/user"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetOwner sets the "owner" field.
func (pu *ProjectUpdate) SetOwner(s string) *ProjectUpdate {
	pu.mutation.SetOwner(s)
	return pu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwner(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetOwner(*s)
	}
	return pu
}

// SetLocation sets the "location" field.
func (pu *ProjectUpdate) SetLocation(s string) *ProjectUpdate {
	pu.mutation.SetLocation(s)
	return pu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableLocation(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetLocation(*s)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *ProjectUpdate) SetType(s string) *ProjectUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableType(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// SetProjectNature sets the "Project_nature" field.
func (pu *ProjectUpdate) SetProjectNature(pn project.ProjectNature) *ProjectUpdate {
	pu.mutation.SetProjectNature(pn)
	return pu
}

// SetNillableProjectNature sets the "Project_nature" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableProjectNature(pn *project.ProjectNature) *ProjectUpdate {
	if pn != nil {
		pu.SetProjectNature(*pn)
	}
	return pu
}

// SetTopLevelPackagesNumber sets the "top_level_packages_number" field.
func (pu *ProjectUpdate) SetTopLevelPackagesNumber(i int) *ProjectUpdate {
	pu.mutation.ResetTopLevelPackagesNumber()
	pu.mutation.SetTopLevelPackagesNumber(i)
	return pu
}

// SetNillableTopLevelPackagesNumber sets the "top_level_packages_number" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTopLevelPackagesNumber(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetTopLevelPackagesNumber(*i)
	}
	return pu
}

// AddTopLevelPackagesNumber adds i to the "top_level_packages_number" field.
func (pu *ProjectUpdate) AddTopLevelPackagesNumber(i int) *ProjectUpdate {
	pu.mutation.AddTopLevelPackagesNumber(i)
	return pu
}

// SetJointVentureNumber sets the "joint_venture_number" field.
func (pu *ProjectUpdate) SetJointVentureNumber(i int) *ProjectUpdate {
	pu.mutation.ResetJointVentureNumber()
	pu.mutation.SetJointVentureNumber(i)
	return pu
}

// SetNillableJointVentureNumber sets the "joint_venture_number" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableJointVentureNumber(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetJointVentureNumber(*i)
	}
	return pu
}

// AddJointVentureNumber adds i to the "joint_venture_number" field.
func (pu *ProjectUpdate) AddJointVentureNumber(i int) *ProjectUpdate {
	pu.mutation.AddJointVentureNumber(i)
	return pu
}

// SetExecutionLocation sets the "execution_location" field.
func (pu *ProjectUpdate) SetExecutionLocation(s string) *ProjectUpdate {
	pu.mutation.SetExecutionLocation(s)
	return pu
}

// SetNillableExecutionLocation sets the "execution_location" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableExecutionLocation(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetExecutionLocation(*s)
	}
	return pu
}

// SetInvolvedStockholders sets the "involved_stockholders" field.
func (pu *ProjectUpdate) SetInvolvedStockholders(i int) *ProjectUpdate {
	pu.mutation.ResetInvolvedStockholders()
	pu.mutation.SetInvolvedStockholders(i)
	return pu
}

// SetNillableInvolvedStockholders sets the "involved_stockholders" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableInvolvedStockholders(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetInvolvedStockholders(*i)
	}
	return pu
}

// AddInvolvedStockholders adds i to the "involved_stockholders" field.
func (pu *ProjectUpdate) AddInvolvedStockholders(i int) *ProjectUpdate {
	pu.mutation.AddInvolvedStockholders(i)
	return pu
}

// SetDollarValue sets the "dollar_value" field.
func (pu *ProjectUpdate) SetDollarValue(i int) *ProjectUpdate {
	pu.mutation.ResetDollarValue()
	pu.mutation.SetDollarValue(i)
	return pu
}

// SetNillableDollarValue sets the "dollar_value" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDollarValue(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDollarValue(*i)
	}
	return pu
}

// AddDollarValue adds i to the "dollar_value" field.
func (pu *ProjectUpdate) AddDollarValue(i int) *ProjectUpdate {
	pu.mutation.AddDollarValue(i)
	return pu
}

// SetStage sets the "stage" field.
func (pu *ProjectUpdate) SetStage(s string) *ProjectUpdate {
	pu.mutation.SetStage(s)
	return pu
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStage(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetStage(*s)
	}
	return pu
}

// SetDeliveryStratigies sets the "delivery_stratigies" field.
func (pu *ProjectUpdate) SetDeliveryStratigies(s string) *ProjectUpdate {
	pu.mutation.SetDeliveryStratigies(s)
	return pu
}

// SetNillableDeliveryStratigies sets the "delivery_stratigies" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDeliveryStratigies(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDeliveryStratigies(*s)
	}
	return pu
}

// SetContractingStratigies sets the "contracting_stratigies" field.
func (pu *ProjectUpdate) SetContractingStratigies(s string) *ProjectUpdate {
	pu.mutation.SetContractingStratigies(s)
	return pu
}

// SetNillableContractingStratigies sets the "contracting_stratigies" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractingStratigies(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetContractingStratigies(*s)
	}
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProjectUpdate) SetUserID(id int) *ProjectUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProjectUpdate) SetUser(u *User) *ProjectUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProjectUpdate) ClearUser() *ProjectUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Owner(); ok {
		if err := project.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Project.owner": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Location(); ok {
		if err := project.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Project.location": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProjectNature(); ok {
		if err := project.ProjectNatureValidator(v); err != nil {
			return &ValidationError{Name: "Project_nature", err: fmt.Errorf(`ent: validator failed for field "Project.Project_nature": %w`, err)}
		}
	}
	if v, ok := pu.mutation.TopLevelPackagesNumber(); ok {
		if err := project.TopLevelPackagesNumberValidator(v); err != nil {
			return &ValidationError{Name: "top_level_packages_number", err: fmt.Errorf(`ent: validator failed for field "Project.top_level_packages_number": %w`, err)}
		}
	}
	if v, ok := pu.mutation.JointVentureNumber(); ok {
		if err := project.JointVentureNumberValidator(v); err != nil {
			return &ValidationError{Name: "joint_venture_number", err: fmt.Errorf(`ent: validator failed for field "Project.joint_venture_number": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ExecutionLocation(); ok {
		if err := project.ExecutionLocationValidator(v); err != nil {
			return &ValidationError{Name: "execution_location", err: fmt.Errorf(`ent: validator failed for field "Project.execution_location": %w`, err)}
		}
	}
	if v, ok := pu.mutation.InvolvedStockholders(); ok {
		if err := project.InvolvedStockholdersValidator(v); err != nil {
			return &ValidationError{Name: "involved_stockholders", err: fmt.Errorf(`ent: validator failed for field "Project.involved_stockholders": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DollarValue(); ok {
		if err := project.DollarValueValidator(v); err != nil {
			return &ValidationError{Name: "dollar_value", err: fmt.Errorf(`ent: validator failed for field "Project.dollar_value": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Stage(); ok {
		if err := project.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf(`ent: validator failed for field "Project.stage": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DeliveryStratigies(); ok {
		if err := project.DeliveryStratigiesValidator(v); err != nil {
			return &ValidationError{Name: "delivery_stratigies", err: fmt.Errorf(`ent: validator failed for field "Project.delivery_stratigies": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ContractingStratigies(); ok {
		if err := project.ContractingStratigiesValidator(v); err != nil {
			return &ValidationError{Name: "contracting_stratigies", err: fmt.Errorf(`ent: validator failed for field "Project.contracting_stratigies": %w`, err)}
		}
	}
	if _, ok := pu.mutation.UserID(); pu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Project.user"`)
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(project.FieldLocation, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProjectNature(); ok {
		_spec.SetField(project.FieldProjectNature, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.TopLevelPackagesNumber(); ok {
		_spec.SetField(project.FieldTopLevelPackagesNumber, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTopLevelPackagesNumber(); ok {
		_spec.AddField(project.FieldTopLevelPackagesNumber, field.TypeInt, value)
	}
	if value, ok := pu.mutation.JointVentureNumber(); ok {
		_spec.SetField(project.FieldJointVentureNumber, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedJointVentureNumber(); ok {
		_spec.AddField(project.FieldJointVentureNumber, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ExecutionLocation(); ok {
		_spec.SetField(project.FieldExecutionLocation, field.TypeString, value)
	}
	if value, ok := pu.mutation.InvolvedStockholders(); ok {
		_spec.SetField(project.FieldInvolvedStockholders, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedInvolvedStockholders(); ok {
		_spec.AddField(project.FieldInvolvedStockholders, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DollarValue(); ok {
		_spec.SetField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDollarValue(); ok {
		_spec.AddField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Stage(); ok {
		_spec.SetField(project.FieldStage, field.TypeString, value)
	}
	if value, ok := pu.mutation.DeliveryStratigies(); ok {
		_spec.SetField(project.FieldDeliveryStratigies, field.TypeString, value)
	}
	if value, ok := pu.mutation.ContractingStratigies(); ok {
		_spec.SetField(project.FieldContractingStratigies, field.TypeString, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetOwner sets the "owner" field.
func (puo *ProjectUpdateOne) SetOwner(s string) *ProjectUpdateOne {
	puo.mutation.SetOwner(s)
	return puo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwner(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetOwner(*s)
	}
	return puo
}

// SetLocation sets the "location" field.
func (puo *ProjectUpdateOne) SetLocation(s string) *ProjectUpdateOne {
	puo.mutation.SetLocation(s)
	return puo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableLocation(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetLocation(*s)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *ProjectUpdateOne) SetType(s string) *ProjectUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableType(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// SetProjectNature sets the "Project_nature" field.
func (puo *ProjectUpdateOne) SetProjectNature(pn project.ProjectNature) *ProjectUpdateOne {
	puo.mutation.SetProjectNature(pn)
	return puo
}

// SetNillableProjectNature sets the "Project_nature" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableProjectNature(pn *project.ProjectNature) *ProjectUpdateOne {
	if pn != nil {
		puo.SetProjectNature(*pn)
	}
	return puo
}

// SetTopLevelPackagesNumber sets the "top_level_packages_number" field.
func (puo *ProjectUpdateOne) SetTopLevelPackagesNumber(i int) *ProjectUpdateOne {
	puo.mutation.ResetTopLevelPackagesNumber()
	puo.mutation.SetTopLevelPackagesNumber(i)
	return puo
}

// SetNillableTopLevelPackagesNumber sets the "top_level_packages_number" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTopLevelPackagesNumber(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetTopLevelPackagesNumber(*i)
	}
	return puo
}

// AddTopLevelPackagesNumber adds i to the "top_level_packages_number" field.
func (puo *ProjectUpdateOne) AddTopLevelPackagesNumber(i int) *ProjectUpdateOne {
	puo.mutation.AddTopLevelPackagesNumber(i)
	return puo
}

// SetJointVentureNumber sets the "joint_venture_number" field.
func (puo *ProjectUpdateOne) SetJointVentureNumber(i int) *ProjectUpdateOne {
	puo.mutation.ResetJointVentureNumber()
	puo.mutation.SetJointVentureNumber(i)
	return puo
}

// SetNillableJointVentureNumber sets the "joint_venture_number" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableJointVentureNumber(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetJointVentureNumber(*i)
	}
	return puo
}

// AddJointVentureNumber adds i to the "joint_venture_number" field.
func (puo *ProjectUpdateOne) AddJointVentureNumber(i int) *ProjectUpdateOne {
	puo.mutation.AddJointVentureNumber(i)
	return puo
}

// SetExecutionLocation sets the "execution_location" field.
func (puo *ProjectUpdateOne) SetExecutionLocation(s string) *ProjectUpdateOne {
	puo.mutation.SetExecutionLocation(s)
	return puo
}

// SetNillableExecutionLocation sets the "execution_location" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableExecutionLocation(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetExecutionLocation(*s)
	}
	return puo
}

// SetInvolvedStockholders sets the "involved_stockholders" field.
func (puo *ProjectUpdateOne) SetInvolvedStockholders(i int) *ProjectUpdateOne {
	puo.mutation.ResetInvolvedStockholders()
	puo.mutation.SetInvolvedStockholders(i)
	return puo
}

// SetNillableInvolvedStockholders sets the "involved_stockholders" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableInvolvedStockholders(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetInvolvedStockholders(*i)
	}
	return puo
}

// AddInvolvedStockholders adds i to the "involved_stockholders" field.
func (puo *ProjectUpdateOne) AddInvolvedStockholders(i int) *ProjectUpdateOne {
	puo.mutation.AddInvolvedStockholders(i)
	return puo
}

// SetDollarValue sets the "dollar_value" field.
func (puo *ProjectUpdateOne) SetDollarValue(i int) *ProjectUpdateOne {
	puo.mutation.ResetDollarValue()
	puo.mutation.SetDollarValue(i)
	return puo
}

// SetNillableDollarValue sets the "dollar_value" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDollarValue(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDollarValue(*i)
	}
	return puo
}

// AddDollarValue adds i to the "dollar_value" field.
func (puo *ProjectUpdateOne) AddDollarValue(i int) *ProjectUpdateOne {
	puo.mutation.AddDollarValue(i)
	return puo
}

// SetStage sets the "stage" field.
func (puo *ProjectUpdateOne) SetStage(s string) *ProjectUpdateOne {
	puo.mutation.SetStage(s)
	return puo
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStage(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetStage(*s)
	}
	return puo
}

// SetDeliveryStratigies sets the "delivery_stratigies" field.
func (puo *ProjectUpdateOne) SetDeliveryStratigies(s string) *ProjectUpdateOne {
	puo.mutation.SetDeliveryStratigies(s)
	return puo
}

// SetNillableDeliveryStratigies sets the "delivery_stratigies" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDeliveryStratigies(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDeliveryStratigies(*s)
	}
	return puo
}

// SetContractingStratigies sets the "contracting_stratigies" field.
func (puo *ProjectUpdateOne) SetContractingStratigies(s string) *ProjectUpdateOne {
	puo.mutation.SetContractingStratigies(s)
	return puo
}

// SetNillableContractingStratigies sets the "contracting_stratigies" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractingStratigies(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetContractingStratigies(*s)
	}
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProjectUpdateOne) SetUserID(id int) *ProjectUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProjectUpdateOne) SetUser(u *User) *ProjectUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProjectUpdateOne) ClearUser() *ProjectUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Owner(); ok {
		if err := project.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Project.owner": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Location(); ok {
		if err := project.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Project.location": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProjectNature(); ok {
		if err := project.ProjectNatureValidator(v); err != nil {
			return &ValidationError{Name: "Project_nature", err: fmt.Errorf(`ent: validator failed for field "Project.Project_nature": %w`, err)}
		}
	}
	if v, ok := puo.mutation.TopLevelPackagesNumber(); ok {
		if err := project.TopLevelPackagesNumberValidator(v); err != nil {
			return &ValidationError{Name: "top_level_packages_number", err: fmt.Errorf(`ent: validator failed for field "Project.top_level_packages_number": %w`, err)}
		}
	}
	if v, ok := puo.mutation.JointVentureNumber(); ok {
		if err := project.JointVentureNumberValidator(v); err != nil {
			return &ValidationError{Name: "joint_venture_number", err: fmt.Errorf(`ent: validator failed for field "Project.joint_venture_number": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ExecutionLocation(); ok {
		if err := project.ExecutionLocationValidator(v); err != nil {
			return &ValidationError{Name: "execution_location", err: fmt.Errorf(`ent: validator failed for field "Project.execution_location": %w`, err)}
		}
	}
	if v, ok := puo.mutation.InvolvedStockholders(); ok {
		if err := project.InvolvedStockholdersValidator(v); err != nil {
			return &ValidationError{Name: "involved_stockholders", err: fmt.Errorf(`ent: validator failed for field "Project.involved_stockholders": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DollarValue(); ok {
		if err := project.DollarValueValidator(v); err != nil {
			return &ValidationError{Name: "dollar_value", err: fmt.Errorf(`ent: validator failed for field "Project.dollar_value": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Stage(); ok {
		if err := project.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf(`ent: validator failed for field "Project.stage": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DeliveryStratigies(); ok {
		if err := project.DeliveryStratigiesValidator(v); err != nil {
			return &ValidationError{Name: "delivery_stratigies", err: fmt.Errorf(`ent: validator failed for field "Project.delivery_stratigies": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ContractingStratigies(); ok {
		if err := project.ContractingStratigiesValidator(v); err != nil {
			return &ValidationError{Name: "contracting_stratigies", err: fmt.Errorf(`ent: validator failed for field "Project.contracting_stratigies": %w`, err)}
		}
	}
	if _, ok := puo.mutation.UserID(); puo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Project.user"`)
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(project.FieldLocation, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProjectNature(); ok {
		_spec.SetField(project.FieldProjectNature, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.TopLevelPackagesNumber(); ok {
		_spec.SetField(project.FieldTopLevelPackagesNumber, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTopLevelPackagesNumber(); ok {
		_spec.AddField(project.FieldTopLevelPackagesNumber, field.TypeInt, value)
	}
	if value, ok := puo.mutation.JointVentureNumber(); ok {
		_spec.SetField(project.FieldJointVentureNumber, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedJointVentureNumber(); ok {
		_spec.AddField(project.FieldJointVentureNumber, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ExecutionLocation(); ok {
		_spec.SetField(project.FieldExecutionLocation, field.TypeString, value)
	}
	if value, ok := puo.mutation.InvolvedStockholders(); ok {
		_spec.SetField(project.FieldInvolvedStockholders, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedInvolvedStockholders(); ok {
		_spec.AddField(project.FieldInvolvedStockholders, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DollarValue(); ok {
		_spec.SetField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDollarValue(); ok {
		_spec.AddField(project.FieldDollarValue, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Stage(); ok {
		_spec.SetField(project.FieldStage, field.TypeString, value)
	}
	if value, ok := puo.mutation.DeliveryStratigies(); ok {
		_spec.SetField(project.FieldDeliveryStratigies, field.TypeString, value)
	}
	if value, ok := puo.mutation.ContractingStratigies(); ok {
		_spec.SetField(project.FieldContractingStratigies, field.TypeString, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
