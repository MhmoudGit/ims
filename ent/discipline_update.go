// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarqeem/ims/ent/discipline"
	"github.com/tarqeem/ims/ent/predicate"
)

// DisciplineUpdate is the builder for updating Discipline entities.
type DisciplineUpdate struct {
	config
	hooks    []Hook
	mutation *DisciplineMutation
}

// Where appends a list predicates to the DisciplineUpdate builder.
func (du *DisciplineUpdate) Where(ps ...predicate.Discipline) *DisciplineUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DisciplineUpdate) SetName(s string) *DisciplineUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DisciplineUpdate) SetNillableName(s *string) *DisciplineUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// Mutation returns the DisciplineMutation object of the builder.
func (du *DisciplineUpdate) Mutation() *DisciplineMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DisciplineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DisciplineUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DisciplineUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DisciplineUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DisciplineUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := discipline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Discipline.name": %w`, err)}
		}
	}
	return nil
}

func (du *DisciplineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(discipline.Table, discipline.Columns, sqlgraph.NewFieldSpec(discipline.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(discipline.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discipline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DisciplineUpdateOne is the builder for updating a single Discipline entity.
type DisciplineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DisciplineMutation
}

// SetName sets the "name" field.
func (duo *DisciplineUpdateOne) SetName(s string) *DisciplineUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DisciplineUpdateOne) SetNillableName(s *string) *DisciplineUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// Mutation returns the DisciplineMutation object of the builder.
func (duo *DisciplineUpdateOne) Mutation() *DisciplineMutation {
	return duo.mutation
}

// Where appends a list predicates to the DisciplineUpdate builder.
func (duo *DisciplineUpdateOne) Where(ps ...predicate.Discipline) *DisciplineUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DisciplineUpdateOne) Select(field string, fields ...string) *DisciplineUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Discipline entity.
func (duo *DisciplineUpdateOne) Save(ctx context.Context) (*Discipline, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DisciplineUpdateOne) SaveX(ctx context.Context) *Discipline {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DisciplineUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DisciplineUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DisciplineUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := discipline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Discipline.name": %w`, err)}
		}
	}
	return nil
}

func (duo *DisciplineUpdateOne) sqlSave(ctx context.Context) (_node *Discipline, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(discipline.Table, discipline.Columns, sqlgraph.NewFieldSpec(discipline.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Discipline.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discipline.FieldID)
		for _, f := range fields {
			if !discipline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discipline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(discipline.FieldName, field.TypeString, value)
	}
	_node = &Discipline{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discipline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
