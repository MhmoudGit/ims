// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tarqeem/ims/ent/issue"
	"github.com/tarqeem/ims/ent/project"
)

// Issue is the model entity for the Issue schema.
type Issue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Creator holds the value of the "Creator" field.
	Creator string `json:"Creator,omitempty"`
	// Status holds the value of the "status" field.
	Status issue.Status `json:"status,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IssueQuery when eager-loading is set.
	Edges          IssueEdges `json:"edges"`
	project_issues *int
	selectValues   sql.SelectValues
}

// IssueEdges holds the relations/edges for other nodes in the graph.
type IssueEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssueEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e IssueEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e IssueEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[2] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Issue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case issue.FieldID:
			values[i] = new(sql.NullInt64)
		case issue.FieldTitle, issue.FieldDescription, issue.FieldCreator, issue.FieldStatus, issue.FieldDate:
			values[i] = new(sql.NullString)
		case issue.ForeignKeys[0]: // project_issues
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Issue fields.
func (i *Issue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case issue.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case issue.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case issue.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case issue.FieldCreator:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Creator", values[j])
			} else if value.Valid {
				i.Creator = value.String
			}
		case issue.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = issue.Status(value.String)
			}
		case issue.FieldDate:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[j])
			} else if value.Valid {
				i.Date = value.String
			}
		case issue.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_issues", value)
			} else if value.Valid {
				i.project_issues = new(int)
				*i.project_issues = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Issue.
// This includes values selected through modifiers, order, etc.
func (i *Issue) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Issue entity.
func (i *Issue) QueryProject() *ProjectQuery {
	return NewIssueClient(i.config).QueryProject(i)
}

// QueryComments queries the "comments" edge of the Issue entity.
func (i *Issue) QueryComments() *CommentQuery {
	return NewIssueClient(i.config).QueryComments(i)
}

// QueryFiles queries the "files" edge of the Issue entity.
func (i *Issue) QueryFiles() *FileQuery {
	return NewIssueClient(i.config).QueryFiles(i)
}

// Update returns a builder for updating this Issue.
// Note that you need to call Issue.Unwrap() before calling this method if this Issue
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Issue) Update() *IssueUpdateOne {
	return NewIssueClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Issue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Issue) Unwrap() *Issue {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Issue is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Issue) String() string {
	var builder strings.Builder
	builder.WriteString("Issue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("Creator=")
	builder.WriteString(i.Creator)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(i.Date)
	builder.WriteByte(')')
	return builder.String()
}

// Issues is a parsable slice of Issue.
type Issues []*Issue
