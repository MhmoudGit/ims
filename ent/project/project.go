// Code generated by ent, DO NOT EDIT.

package project

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldProjectNature holds the string denoting the project_nature field in the database.
	FieldProjectNature = "project_nature"
	// FieldTopLevelPackagesNumber holds the string denoting the top_level_packages_number field in the database.
	FieldTopLevelPackagesNumber = "top_level_packages_number"
	// FieldJointVentureNumber holds the string denoting the joint_venture_number field in the database.
	FieldJointVentureNumber = "joint_venture_number"
	// FieldExecutionLocation holds the string denoting the execution_location field in the database.
	FieldExecutionLocation = "execution_location"
	// FieldInvolvedStockholders holds the string denoting the involved_stockholders field in the database.
	FieldInvolvedStockholders = "involved_stockholders"
	// FieldDollarValue holds the string denoting the dollar_value field in the database.
	FieldDollarValue = "dollar_value"
	// FieldStage holds the string denoting the stage field in the database.
	FieldStage = "stage"
	// FieldDeliveryStratigies holds the string denoting the delivery_stratigies field in the database.
	FieldDeliveryStratigies = "delivery_stratigies"
	// FieldContractingStratigies holds the string denoting the contracting_stratigies field in the database.
	FieldContractingStratigies = "contracting_stratigies"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "projects"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_projects"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOwner,
	FieldLocation,
	FieldType,
	FieldProjectNature,
	FieldTopLevelPackagesNumber,
	FieldJointVentureNumber,
	FieldExecutionLocation,
	FieldInvolvedStockholders,
	FieldDollarValue,
	FieldStage,
	FieldDeliveryStratigies,
	FieldContractingStratigies,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "projects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_projects",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// TopLevelPackagesNumberValidator is a validator for the "top_level_packages_number" field. It is called by the builders before save.
	TopLevelPackagesNumberValidator func(int) error
	// JointVentureNumberValidator is a validator for the "joint_venture_number" field. It is called by the builders before save.
	JointVentureNumberValidator func(int) error
	// ExecutionLocationValidator is a validator for the "execution_location" field. It is called by the builders before save.
	ExecutionLocationValidator func(string) error
	// InvolvedStockholdersValidator is a validator for the "involved_stockholders" field. It is called by the builders before save.
	InvolvedStockholdersValidator func(int) error
	// DollarValueValidator is a validator for the "dollar_value" field. It is called by the builders before save.
	DollarValueValidator func(int) error
	// StageValidator is a validator for the "stage" field. It is called by the builders before save.
	StageValidator func(string) error
	// DeliveryStratigiesValidator is a validator for the "delivery_stratigies" field. It is called by the builders before save.
	DeliveryStratigiesValidator func(string) error
	// ContractingStratigiesValidator is a validator for the "contracting_stratigies" field. It is called by the builders before save.
	ContractingStratigiesValidator func(string) error
)

// ProjectNature defines the type for the "Project_nature" enum field.
type ProjectNature string

// ProjectNature values.
const (
	ProjectNatureGreenfield ProjectNature = "greenfield"
	ProjectNatureBrownfield ProjectNature = "brownfield"
)

func (_project_nature ProjectNature) String() string {
	return string(_project_nature)
}

// ProjectNatureValidator is a validator for the "Project_nature" field enum values. It is called by the builders before save.
func ProjectNatureValidator(_project_nature ProjectNature) error {
	switch _project_nature {
	case ProjectNatureGreenfield, ProjectNatureBrownfield:
		return nil
	default:
		return fmt.Errorf("project: invalid enum value for Project_nature field: %q", _project_nature)
	}
}

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProjectNature orders the results by the Project_nature field.
func ByProjectNature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectNature, opts...).ToFunc()
}

// ByTopLevelPackagesNumber orders the results by the top_level_packages_number field.
func ByTopLevelPackagesNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopLevelPackagesNumber, opts...).ToFunc()
}

// ByJointVentureNumber orders the results by the joint_venture_number field.
func ByJointVentureNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJointVentureNumber, opts...).ToFunc()
}

// ByExecutionLocation orders the results by the execution_location field.
func ByExecutionLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionLocation, opts...).ToFunc()
}

// ByInvolvedStockholders orders the results by the involved_stockholders field.
func ByInvolvedStockholders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvolvedStockholders, opts...).ToFunc()
}

// ByDollarValue orders the results by the dollar_value field.
func ByDollarValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDollarValue, opts...).ToFunc()
}

// ByStage orders the results by the stage field.
func ByStage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStage, opts...).ToFunc()
}

// ByDeliveryStratigies orders the results by the delivery_stratigies field.
func ByDeliveryStratigies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryStratigies, opts...).ToFunc()
}

// ByContractingStratigies orders the results by the contracting_stratigies field.
func ByContractingStratigies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractingStratigies, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
