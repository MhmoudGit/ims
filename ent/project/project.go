// Code generated by ent, DO NOT EDIT.

package project

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldProjectNature holds the string denoting the project_nature field in the database.
	FieldProjectNature = "project_nature"
	// FieldDeliveryStrategies holds the string denoting the delivery_strategies field in the database.
	FieldDeliveryStrategies = "delivery_strategies"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldContractingStrategies holds the string denoting the contracting_strategies field in the database.
	FieldContractingStrategies = "contracting_strategies"
	// FieldDollarValue holds the string denoting the dollar_value field in the database.
	FieldDollarValue = "dollar_value"
	// FieldExecutionLocation holds the string denoting the execution_location field in the database.
	FieldExecutionLocation = "execution_location"
	// EdgeLeader holds the string denoting the leader edge name in mutations.
	EdgeLeader = "leader"
	// EdgeCoordinator holds the string denoting the coordinator edge name in mutations.
	EdgeCoordinator = "coordinator"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// LeaderTable is the table that holds the leader relation/edge. The primary key declared below.
	LeaderTable = "user_leader_of_project"
	// LeaderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	LeaderInverseTable = "users"
	// CoordinatorTable is the table that holds the coordinator relation/edge. The primary key declared below.
	CoordinatorTable = "user_coordinator_of_project"
	// CoordinatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CoordinatorInverseTable = "users"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "project_members"
	// MembersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MembersInverseTable = "users"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOwner,
	FieldLocation,
	FieldType,
	FieldProjectNature,
	FieldDeliveryStrategies,
	FieldState,
	FieldContractingStrategies,
	FieldDollarValue,
	FieldExecutionLocation,
}

var (
	// LeaderPrimaryKey and LeaderColumn2 are the table columns denoting the
	// primary key for the leader relation (M2M).
	LeaderPrimaryKey = []string{"user_id", "project_id"}
	// CoordinatorPrimaryKey and CoordinatorColumn2 are the table columns denoting the
	// primary key for the coordinator relation (M2M).
	CoordinatorPrimaryKey = []string{"user_id", "project_id"}
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"project_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DeliveryStrategiesValidator is a validator for the "delivery_strategies" field. It is called by the builders before save.
	DeliveryStrategiesValidator func(string) error
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// ContractingStrategiesValidator is a validator for the "contracting_strategies" field. It is called by the builders before save.
	ContractingStrategiesValidator func(string) error
	// DollarValueValidator is a validator for the "dollar_value" field. It is called by the builders before save.
	DollarValueValidator func(int) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeChemicalManufacturing         Type = "Chemical Manufacturing"
	TypeStadiumMusuem                 Type = "Stadium Musuem"
	TypeDam                           Type = "Dam"
	TypeMetalRefiningOrProcessing     Type = "Metal refining or processing"
	TypeOilExplorationOrProduction    Type = "Oil exploration or production"
	TypeOilRefining                   Type = "Oil refining"
	TypeNaturalGasProcessing          Type = "Natural gas processing"
	TypeHighway                       Type = "Highway"
	TypePowerGeneration               Type = "Power generation"
	TypeWaterOrWastewater             Type = "Water or wastewater"
	TypeConsumerProductsManufacturing Type = "Consumer products manufacturing"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeChemicalManufacturing, TypeStadiumMusuem, TypeDam, TypeMetalRefiningOrProcessing, TypeOilExplorationOrProduction, TypeOilRefining, TypeNaturalGasProcessing, TypeHighway, TypePowerGeneration, TypeWaterOrWastewater, TypeConsumerProductsManufacturing:
		return nil
	default:
		return fmt.Errorf("project: invalid enum value for type field: %q", _type)
	}
}

// ProjectNature defines the type for the "project_nature" enum field.
type ProjectNature string

// ProjectNature values.
const (
	ProjectNatureGreenfield ProjectNature = "Greenfield"
	ProjectNatureBrownfield ProjectNature = "Brownfield"
)

func (pn ProjectNature) String() string {
	return string(pn)
}

// ProjectNatureValidator is a validator for the "project_nature" field enum values. It is called by the builders before save.
func ProjectNatureValidator(pn ProjectNature) error {
	switch pn {
	case ProjectNatureGreenfield, ProjectNatureBrownfield:
		return nil
	default:
		return fmt.Errorf("project: invalid enum value for project_nature field: %q", pn)
	}
}

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProjectNature orders the results by the project_nature field.
func ByProjectNature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectNature, opts...).ToFunc()
}

// ByDeliveryStrategies orders the results by the delivery_strategies field.
func ByDeliveryStrategies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryStrategies, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByContractingStrategies orders the results by the contracting_strategies field.
func ByContractingStrategies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractingStrategies, opts...).ToFunc()
}

// ByDollarValue orders the results by the dollar_value field.
func ByDollarValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDollarValue, opts...).ToFunc()
}

// ByExecutionLocation orders the results by the execution_location field.
func ByExecutionLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionLocation, opts...).ToFunc()
}

// ByLeaderCount orders the results by leader count.
func ByLeaderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeaderStep(), opts...)
	}
}

// ByLeader orders the results by leader terms.
func ByLeader(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCoordinatorCount orders the results by coordinator count.
func ByCoordinatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoordinatorStep(), opts...)
	}
}

// ByCoordinator orders the results by coordinator terms.
func ByCoordinator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoordinatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLeaderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LeaderTable, LeaderPrimaryKey...),
	)
}
func newCoordinatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoordinatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CoordinatorTable, CoordinatorPrimaryKey...),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MembersTable, MembersPrimaryKey...),
	)
}
