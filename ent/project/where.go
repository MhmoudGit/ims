// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tarqeem/ims/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwner, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocation, v))
}

// DeliveryStrategies applies equality check predicate on the "delivery_strategies" field. It's identical to DeliveryStrategiesEQ.
func DeliveryStrategies(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeliveryStrategies, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldState, v))
}

// ContractingStrategies applies equality check predicate on the "contracting_strategies" field. It's identical to ContractingStrategiesEQ.
func ContractingStrategies(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractingStrategies, v))
}

// DollarValue applies equality check predicate on the "dollar_value" field. It's identical to DollarValueEQ.
func DollarValue(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDollarValue, v))
}

// ExecutionLocation applies equality check predicate on the "execution_location" field. It's identical to ExecutionLocationEQ.
func ExecutionLocation(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldExecutionLocation, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldOwner, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldLocation, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldType, vs...))
}

// ProjectNatureEQ applies the EQ predicate on the "project_nature" field.
func ProjectNatureEQ(v ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldProjectNature, v))
}

// ProjectNatureNEQ applies the NEQ predicate on the "project_nature" field.
func ProjectNatureNEQ(v ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldProjectNature, v))
}

// ProjectNatureIn applies the In predicate on the "project_nature" field.
func ProjectNatureIn(vs ...ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldProjectNature, vs...))
}

// ProjectNatureNotIn applies the NotIn predicate on the "project_nature" field.
func ProjectNatureNotIn(vs ...ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldProjectNature, vs...))
}

// DeliveryStrategiesEQ applies the EQ predicate on the "delivery_strategies" field.
func DeliveryStrategiesEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesNEQ applies the NEQ predicate on the "delivery_strategies" field.
func DeliveryStrategiesNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesIn applies the In predicate on the "delivery_strategies" field.
func DeliveryStrategiesIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDeliveryStrategies, vs...))
}

// DeliveryStrategiesNotIn applies the NotIn predicate on the "delivery_strategies" field.
func DeliveryStrategiesNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDeliveryStrategies, vs...))
}

// DeliveryStrategiesGT applies the GT predicate on the "delivery_strategies" field.
func DeliveryStrategiesGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesGTE applies the GTE predicate on the "delivery_strategies" field.
func DeliveryStrategiesGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesLT applies the LT predicate on the "delivery_strategies" field.
func DeliveryStrategiesLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesLTE applies the LTE predicate on the "delivery_strategies" field.
func DeliveryStrategiesLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesContains applies the Contains predicate on the "delivery_strategies" field.
func DeliveryStrategiesContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesHasPrefix applies the HasPrefix predicate on the "delivery_strategies" field.
func DeliveryStrategiesHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesHasSuffix applies the HasSuffix predicate on the "delivery_strategies" field.
func DeliveryStrategiesHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesEqualFold applies the EqualFold predicate on the "delivery_strategies" field.
func DeliveryStrategiesEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDeliveryStrategies, v))
}

// DeliveryStrategiesContainsFold applies the ContainsFold predicate on the "delivery_strategies" field.
func DeliveryStrategiesContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDeliveryStrategies, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldState, v))
}

// ContractingStrategiesEQ applies the EQ predicate on the "contracting_strategies" field.
func ContractingStrategiesEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractingStrategies, v))
}

// ContractingStrategiesNEQ applies the NEQ predicate on the "contracting_strategies" field.
func ContractingStrategiesNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractingStrategies, v))
}

// ContractingStrategiesIn applies the In predicate on the "contracting_strategies" field.
func ContractingStrategiesIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractingStrategies, vs...))
}

// ContractingStrategiesNotIn applies the NotIn predicate on the "contracting_strategies" field.
func ContractingStrategiesNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractingStrategies, vs...))
}

// ContractingStrategiesGT applies the GT predicate on the "contracting_strategies" field.
func ContractingStrategiesGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractingStrategies, v))
}

// ContractingStrategiesGTE applies the GTE predicate on the "contracting_strategies" field.
func ContractingStrategiesGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractingStrategies, v))
}

// ContractingStrategiesLT applies the LT predicate on the "contracting_strategies" field.
func ContractingStrategiesLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractingStrategies, v))
}

// ContractingStrategiesLTE applies the LTE predicate on the "contracting_strategies" field.
func ContractingStrategiesLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractingStrategies, v))
}

// ContractingStrategiesContains applies the Contains predicate on the "contracting_strategies" field.
func ContractingStrategiesContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldContractingStrategies, v))
}

// ContractingStrategiesHasPrefix applies the HasPrefix predicate on the "contracting_strategies" field.
func ContractingStrategiesHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldContractingStrategies, v))
}

// ContractingStrategiesHasSuffix applies the HasSuffix predicate on the "contracting_strategies" field.
func ContractingStrategiesHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldContractingStrategies, v))
}

// ContractingStrategiesEqualFold applies the EqualFold predicate on the "contracting_strategies" field.
func ContractingStrategiesEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldContractingStrategies, v))
}

// ContractingStrategiesContainsFold applies the ContainsFold predicate on the "contracting_strategies" field.
func ContractingStrategiesContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldContractingStrategies, v))
}

// DollarValueEQ applies the EQ predicate on the "dollar_value" field.
func DollarValueEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDollarValue, v))
}

// DollarValueNEQ applies the NEQ predicate on the "dollar_value" field.
func DollarValueNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDollarValue, v))
}

// DollarValueIn applies the In predicate on the "dollar_value" field.
func DollarValueIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDollarValue, vs...))
}

// DollarValueNotIn applies the NotIn predicate on the "dollar_value" field.
func DollarValueNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDollarValue, vs...))
}

// DollarValueGT applies the GT predicate on the "dollar_value" field.
func DollarValueGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDollarValue, v))
}

// DollarValueGTE applies the GTE predicate on the "dollar_value" field.
func DollarValueGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDollarValue, v))
}

// DollarValueLT applies the LT predicate on the "dollar_value" field.
func DollarValueLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDollarValue, v))
}

// DollarValueLTE applies the LTE predicate on the "dollar_value" field.
func DollarValueLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDollarValue, v))
}

// ExecutionLocationEQ applies the EQ predicate on the "execution_location" field.
func ExecutionLocationEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldExecutionLocation, v))
}

// ExecutionLocationNEQ applies the NEQ predicate on the "execution_location" field.
func ExecutionLocationNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldExecutionLocation, v))
}

// ExecutionLocationIn applies the In predicate on the "execution_location" field.
func ExecutionLocationIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldExecutionLocation, vs...))
}

// ExecutionLocationNotIn applies the NotIn predicate on the "execution_location" field.
func ExecutionLocationNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldExecutionLocation, vs...))
}

// ExecutionLocationGT applies the GT predicate on the "execution_location" field.
func ExecutionLocationGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldExecutionLocation, v))
}

// ExecutionLocationGTE applies the GTE predicate on the "execution_location" field.
func ExecutionLocationGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldExecutionLocation, v))
}

// ExecutionLocationLT applies the LT predicate on the "execution_location" field.
func ExecutionLocationLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldExecutionLocation, v))
}

// ExecutionLocationLTE applies the LTE predicate on the "execution_location" field.
func ExecutionLocationLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldExecutionLocation, v))
}

// ExecutionLocationContains applies the Contains predicate on the "execution_location" field.
func ExecutionLocationContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldExecutionLocation, v))
}

// ExecutionLocationHasPrefix applies the HasPrefix predicate on the "execution_location" field.
func ExecutionLocationHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldExecutionLocation, v))
}

// ExecutionLocationHasSuffix applies the HasSuffix predicate on the "execution_location" field.
func ExecutionLocationHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldExecutionLocation, v))
}

// ExecutionLocationEqualFold applies the EqualFold predicate on the "execution_location" field.
func ExecutionLocationEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldExecutionLocation, v))
}

// ExecutionLocationContainsFold applies the ContainsFold predicate on the "execution_location" field.
func ExecutionLocationContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldExecutionLocation, v))
}

// HasLeader applies the HasEdge predicate on the "leader" edge.
func HasLeader() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LeaderTable, LeaderPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaderWith applies the HasEdge predicate on the "leader" edge with a given conditions (other predicates).
func HasLeaderWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newLeaderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCoordinator applies the HasEdge predicate on the "coordinator" edge.
func HasCoordinator() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CoordinatorTable, CoordinatorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoordinatorWith applies the HasEdge predicate on the "coordinator" edge with a given conditions (other predicates).
func HasCoordinatorWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newCoordinatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MembersTable, MembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
