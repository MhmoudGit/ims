// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tarqeem/ims/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwner, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocation, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldType, v))
}

// TopLevelPackagesNumber applies equality check predicate on the "top_level_packages_number" field. It's identical to TopLevelPackagesNumberEQ.
func TopLevelPackagesNumber(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTopLevelPackagesNumber, v))
}

// JointVentureNumber applies equality check predicate on the "joint_venture_number" field. It's identical to JointVentureNumberEQ.
func JointVentureNumber(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldJointVentureNumber, v))
}

// ExecutionLocation applies equality check predicate on the "execution_location" field. It's identical to ExecutionLocationEQ.
func ExecutionLocation(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldExecutionLocation, v))
}

// InvolvedStockholders applies equality check predicate on the "involved_stockholders" field. It's identical to InvolvedStockholdersEQ.
func InvolvedStockholders(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldInvolvedStockholders, v))
}

// DollarValue applies equality check predicate on the "dollar_value" field. It's identical to DollarValueEQ.
func DollarValue(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDollarValue, v))
}

// Stage applies equality check predicate on the "stage" field. It's identical to StageEQ.
func Stage(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStage, v))
}

// DeliveryStratigies applies equality check predicate on the "delivery_stratigies" field. It's identical to DeliveryStratigiesEQ.
func DeliveryStratigies(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeliveryStratigies, v))
}

// ContractingStratigies applies equality check predicate on the "contracting_stratigies" field. It's identical to ContractingStratigiesEQ.
func ContractingStratigies(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractingStratigies, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldOwner, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldLocation, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldType, v))
}

// ProjectNatureEQ applies the EQ predicate on the "Project_nature" field.
func ProjectNatureEQ(v ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldProjectNature, v))
}

// ProjectNatureNEQ applies the NEQ predicate on the "Project_nature" field.
func ProjectNatureNEQ(v ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldProjectNature, v))
}

// ProjectNatureIn applies the In predicate on the "Project_nature" field.
func ProjectNatureIn(vs ...ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldProjectNature, vs...))
}

// ProjectNatureNotIn applies the NotIn predicate on the "Project_nature" field.
func ProjectNatureNotIn(vs ...ProjectNature) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldProjectNature, vs...))
}

// TopLevelPackagesNumberEQ applies the EQ predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTopLevelPackagesNumber, v))
}

// TopLevelPackagesNumberNEQ applies the NEQ predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldTopLevelPackagesNumber, v))
}

// TopLevelPackagesNumberIn applies the In predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldTopLevelPackagesNumber, vs...))
}

// TopLevelPackagesNumberNotIn applies the NotIn predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldTopLevelPackagesNumber, vs...))
}

// TopLevelPackagesNumberGT applies the GT predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldTopLevelPackagesNumber, v))
}

// TopLevelPackagesNumberGTE applies the GTE predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldTopLevelPackagesNumber, v))
}

// TopLevelPackagesNumberLT applies the LT predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldTopLevelPackagesNumber, v))
}

// TopLevelPackagesNumberLTE applies the LTE predicate on the "top_level_packages_number" field.
func TopLevelPackagesNumberLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldTopLevelPackagesNumber, v))
}

// JointVentureNumberEQ applies the EQ predicate on the "joint_venture_number" field.
func JointVentureNumberEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldJointVentureNumber, v))
}

// JointVentureNumberNEQ applies the NEQ predicate on the "joint_venture_number" field.
func JointVentureNumberNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldJointVentureNumber, v))
}

// JointVentureNumberIn applies the In predicate on the "joint_venture_number" field.
func JointVentureNumberIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldJointVentureNumber, vs...))
}

// JointVentureNumberNotIn applies the NotIn predicate on the "joint_venture_number" field.
func JointVentureNumberNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldJointVentureNumber, vs...))
}

// JointVentureNumberGT applies the GT predicate on the "joint_venture_number" field.
func JointVentureNumberGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldJointVentureNumber, v))
}

// JointVentureNumberGTE applies the GTE predicate on the "joint_venture_number" field.
func JointVentureNumberGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldJointVentureNumber, v))
}

// JointVentureNumberLT applies the LT predicate on the "joint_venture_number" field.
func JointVentureNumberLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldJointVentureNumber, v))
}

// JointVentureNumberLTE applies the LTE predicate on the "joint_venture_number" field.
func JointVentureNumberLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldJointVentureNumber, v))
}

// ExecutionLocationEQ applies the EQ predicate on the "execution_location" field.
func ExecutionLocationEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldExecutionLocation, v))
}

// ExecutionLocationNEQ applies the NEQ predicate on the "execution_location" field.
func ExecutionLocationNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldExecutionLocation, v))
}

// ExecutionLocationIn applies the In predicate on the "execution_location" field.
func ExecutionLocationIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldExecutionLocation, vs...))
}

// ExecutionLocationNotIn applies the NotIn predicate on the "execution_location" field.
func ExecutionLocationNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldExecutionLocation, vs...))
}

// ExecutionLocationGT applies the GT predicate on the "execution_location" field.
func ExecutionLocationGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldExecutionLocation, v))
}

// ExecutionLocationGTE applies the GTE predicate on the "execution_location" field.
func ExecutionLocationGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldExecutionLocation, v))
}

// ExecutionLocationLT applies the LT predicate on the "execution_location" field.
func ExecutionLocationLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldExecutionLocation, v))
}

// ExecutionLocationLTE applies the LTE predicate on the "execution_location" field.
func ExecutionLocationLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldExecutionLocation, v))
}

// ExecutionLocationContains applies the Contains predicate on the "execution_location" field.
func ExecutionLocationContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldExecutionLocation, v))
}

// ExecutionLocationHasPrefix applies the HasPrefix predicate on the "execution_location" field.
func ExecutionLocationHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldExecutionLocation, v))
}

// ExecutionLocationHasSuffix applies the HasSuffix predicate on the "execution_location" field.
func ExecutionLocationHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldExecutionLocation, v))
}

// ExecutionLocationEqualFold applies the EqualFold predicate on the "execution_location" field.
func ExecutionLocationEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldExecutionLocation, v))
}

// ExecutionLocationContainsFold applies the ContainsFold predicate on the "execution_location" field.
func ExecutionLocationContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldExecutionLocation, v))
}

// InvolvedStockholdersEQ applies the EQ predicate on the "involved_stockholders" field.
func InvolvedStockholdersEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldInvolvedStockholders, v))
}

// InvolvedStockholdersNEQ applies the NEQ predicate on the "involved_stockholders" field.
func InvolvedStockholdersNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldInvolvedStockholders, v))
}

// InvolvedStockholdersIn applies the In predicate on the "involved_stockholders" field.
func InvolvedStockholdersIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldInvolvedStockholders, vs...))
}

// InvolvedStockholdersNotIn applies the NotIn predicate on the "involved_stockholders" field.
func InvolvedStockholdersNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldInvolvedStockholders, vs...))
}

// InvolvedStockholdersGT applies the GT predicate on the "involved_stockholders" field.
func InvolvedStockholdersGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldInvolvedStockholders, v))
}

// InvolvedStockholdersGTE applies the GTE predicate on the "involved_stockholders" field.
func InvolvedStockholdersGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldInvolvedStockholders, v))
}

// InvolvedStockholdersLT applies the LT predicate on the "involved_stockholders" field.
func InvolvedStockholdersLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldInvolvedStockholders, v))
}

// InvolvedStockholdersLTE applies the LTE predicate on the "involved_stockholders" field.
func InvolvedStockholdersLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldInvolvedStockholders, v))
}

// DollarValueEQ applies the EQ predicate on the "dollar_value" field.
func DollarValueEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDollarValue, v))
}

// DollarValueNEQ applies the NEQ predicate on the "dollar_value" field.
func DollarValueNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDollarValue, v))
}

// DollarValueIn applies the In predicate on the "dollar_value" field.
func DollarValueIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDollarValue, vs...))
}

// DollarValueNotIn applies the NotIn predicate on the "dollar_value" field.
func DollarValueNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDollarValue, vs...))
}

// DollarValueGT applies the GT predicate on the "dollar_value" field.
func DollarValueGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDollarValue, v))
}

// DollarValueGTE applies the GTE predicate on the "dollar_value" field.
func DollarValueGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDollarValue, v))
}

// DollarValueLT applies the LT predicate on the "dollar_value" field.
func DollarValueLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDollarValue, v))
}

// DollarValueLTE applies the LTE predicate on the "dollar_value" field.
func DollarValueLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDollarValue, v))
}

// StageEQ applies the EQ predicate on the "stage" field.
func StageEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStage, v))
}

// StageNEQ applies the NEQ predicate on the "stage" field.
func StageNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldStage, v))
}

// StageIn applies the In predicate on the "stage" field.
func StageIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldStage, vs...))
}

// StageNotIn applies the NotIn predicate on the "stage" field.
func StageNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldStage, vs...))
}

// StageGT applies the GT predicate on the "stage" field.
func StageGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldStage, v))
}

// StageGTE applies the GTE predicate on the "stage" field.
func StageGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldStage, v))
}

// StageLT applies the LT predicate on the "stage" field.
func StageLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldStage, v))
}

// StageLTE applies the LTE predicate on the "stage" field.
func StageLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldStage, v))
}

// StageContains applies the Contains predicate on the "stage" field.
func StageContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldStage, v))
}

// StageHasPrefix applies the HasPrefix predicate on the "stage" field.
func StageHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldStage, v))
}

// StageHasSuffix applies the HasSuffix predicate on the "stage" field.
func StageHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldStage, v))
}

// StageEqualFold applies the EqualFold predicate on the "stage" field.
func StageEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldStage, v))
}

// StageContainsFold applies the ContainsFold predicate on the "stage" field.
func StageContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldStage, v))
}

// DeliveryStratigiesEQ applies the EQ predicate on the "delivery_stratigies" field.
func DeliveryStratigiesEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesNEQ applies the NEQ predicate on the "delivery_stratigies" field.
func DeliveryStratigiesNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesIn applies the In predicate on the "delivery_stratigies" field.
func DeliveryStratigiesIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDeliveryStratigies, vs...))
}

// DeliveryStratigiesNotIn applies the NotIn predicate on the "delivery_stratigies" field.
func DeliveryStratigiesNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDeliveryStratigies, vs...))
}

// DeliveryStratigiesGT applies the GT predicate on the "delivery_stratigies" field.
func DeliveryStratigiesGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesGTE applies the GTE predicate on the "delivery_stratigies" field.
func DeliveryStratigiesGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesLT applies the LT predicate on the "delivery_stratigies" field.
func DeliveryStratigiesLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesLTE applies the LTE predicate on the "delivery_stratigies" field.
func DeliveryStratigiesLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesContains applies the Contains predicate on the "delivery_stratigies" field.
func DeliveryStratigiesContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesHasPrefix applies the HasPrefix predicate on the "delivery_stratigies" field.
func DeliveryStratigiesHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesHasSuffix applies the HasSuffix predicate on the "delivery_stratigies" field.
func DeliveryStratigiesHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesEqualFold applies the EqualFold predicate on the "delivery_stratigies" field.
func DeliveryStratigiesEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDeliveryStratigies, v))
}

// DeliveryStratigiesContainsFold applies the ContainsFold predicate on the "delivery_stratigies" field.
func DeliveryStratigiesContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDeliveryStratigies, v))
}

// ContractingStratigiesEQ applies the EQ predicate on the "contracting_stratigies" field.
func ContractingStratigiesEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractingStratigies, v))
}

// ContractingStratigiesNEQ applies the NEQ predicate on the "contracting_stratigies" field.
func ContractingStratigiesNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractingStratigies, v))
}

// ContractingStratigiesIn applies the In predicate on the "contracting_stratigies" field.
func ContractingStratigiesIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractingStratigies, vs...))
}

// ContractingStratigiesNotIn applies the NotIn predicate on the "contracting_stratigies" field.
func ContractingStratigiesNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractingStratigies, vs...))
}

// ContractingStratigiesGT applies the GT predicate on the "contracting_stratigies" field.
func ContractingStratigiesGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractingStratigies, v))
}

// ContractingStratigiesGTE applies the GTE predicate on the "contracting_stratigies" field.
func ContractingStratigiesGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractingStratigies, v))
}

// ContractingStratigiesLT applies the LT predicate on the "contracting_stratigies" field.
func ContractingStratigiesLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractingStratigies, v))
}

// ContractingStratigiesLTE applies the LTE predicate on the "contracting_stratigies" field.
func ContractingStratigiesLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractingStratigies, v))
}

// ContractingStratigiesContains applies the Contains predicate on the "contracting_stratigies" field.
func ContractingStratigiesContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldContractingStratigies, v))
}

// ContractingStratigiesHasPrefix applies the HasPrefix predicate on the "contracting_stratigies" field.
func ContractingStratigiesHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldContractingStratigies, v))
}

// ContractingStratigiesHasSuffix applies the HasSuffix predicate on the "contracting_stratigies" field.
func ContractingStratigiesHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldContractingStratigies, v))
}

// ContractingStratigiesEqualFold applies the EqualFold predicate on the "contracting_stratigies" field.
func ContractingStratigiesEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldContractingStratigies, v))
}

// ContractingStratigiesContainsFold applies the ContainsFold predicate on the "contracting_stratigies" field.
func ContractingStratigiesContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldContractingStratigies, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
